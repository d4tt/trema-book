#+TITLE: トラフィックモニタ
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* トラフィックモニタ
#+BEGIN_VERSE
ラーニングスイッチの応用がトラフィックモニタです。ちょっとしたコードを
足すだけで、簡単に機能を追加できるTremaのパワーを実感してください。
#+END_VERSE

[[./images/traffic_monitor/flags.png]]

** トラフィック情報を収集しよう
第8章で作ったラーニングスイッチをベースに、より高機能なスイッチを作っ
てみましょう。今回作るトラフィックモニタは、パっと見は普通のラーニング
スイッチとして動作します。しかし、裏では各ホストが送信したトラフィック
をカウントしており、定期的にこのトラフィック情報を表示します。これを使
えば、たとえばネットワークを無駄に使いすぎているホストを簡単に特定でき
ます。

この章でのポイントはずばり、トラフィック情報の収集方法です。スイッチか
らトラフィック情報を取得するには、Flow Modでフローエントリを書き込むと
きに寿命（タイムアウト値）を設定しておき、一定時間後にフローエントリが
削除されるようにしておきます。タイムアウトしてフローエントリが削除され
ると、これを通知するFlow Removedメッセージがコントローラに上がります。
このFlow Removedメッセージにはトラフィック情報が含まれているので、コン
トローラで取り出して集計してやります（▼図9-1）。

#+CAPTION: Flow Removedメッセージから統計情報を取得する
#+LABEL: fig:flow_removed
[[./images/traffic_monitor/flow_removed.png]]

トラフィック収集以外の部分は、ラーニングスイッチとまったく変わりません。
ソースコードの差分も小さいので、前置きはこのくらいにしてソースコードを
ざっと眺めてみましょう。

** TrafficMonitorコントローラ
トラフィックモニターはおおまかに「ラーニングスイッチ機能」と「トラフィッ
クの集計機能」の2つの機能から成ります。コードをわかりやすくするため、
それぞれを独立したクラスとして.rbファイルを分けて実装してあります。

- =TrafficMonitor= クラス：ラーニングスイッチにトラフィック収集機能を
  追加したもの
- =Counter= クラス：収集したトラフィック情報を集計するクラス

このうち =TrafficMonitor= クラスがコントローラの本体で、これが
=Counter= クラスを使うという関係になります。

*** TrafficMonitorクラス
まずは =TrafficMonitor= クラスのソースコード（▼リスト9-1）をざっと眺
めてみましょう。とくに、ラーニングスイッチとの差分に注目してください。

○リスト9-1：本体TrafficMonitorクラス（traffic-monitor.rb）

#+BEGIN_SRC ruby
  require 'counter'

  class TrafficMonitor < Controller
    periodic_timer_event :show_counter, 10

    def start
      @fdb = {}
      @counter = Counter.new
    end

    def packet_in(datapath_id, message)
      @fdb[message.macsa] = message.in_port
      port_no = @fdb[message.macda]
      if port_no
        flow_mod datapath_id, message, port_no
        packet_out datapath_id, message, port_no
      else
        flood datapath_id, message
      end
      @counter.add message.macsa, 1, message.total_len
    end

    def flow_removed(_, message)
      @counter.add message.match.dl_src, message.packet_count, message.byte_count
    end

    private

    def show_counter
      puts Time.now
      @counter.each_pair do |mac, counter|
        puts "#{mac} #{counter[:packet_count]} packets"\
             " (#{counter[:byte_count]} bytes)"
      end
    end

    def flow_mod(datapath_id, message, port_no)
      send_flow_mod_add(
        datapath_id,
        hard_timeout: 10,
        match: ExactMatch.from(message),
        actions: SendOutPort.new(port_no)
      )
    end

    def packet_out(datapath_id, message, port_no)
      send_packet_out(
        datapath_id,
        packet_in: message,
        actions: SendOutPort.new(port_no)
      )
    end

    def flood(datapath_id, message)
      packet_out datapath_id, message, OFPP_FLOOD
    end
  end
#+END_SRC

ラーニングスイッチのコードと比べて、新たに2つのメソッドが追加されてい
ることがわかるでしょう。それぞれの処理内容はだいたい次のように読めます。

1. =flow_removed= メソッド：Flow Removedメッセージを受け取るハンドラ。
   Flow Removedメッセージに含まれるトラフィック情報を取り出してカウン
   タを更新する
2. =show_counter= メソッド：トラフィックの集計情報を表示する。冒頭の
   =periodic_timer_event= により、10秒ごとに情報を表示する

そのほかの変更点は、Flow Modの部分でトラフィック集計用にタイムアウトの
オプション (=hard_timeout: 10=) を追加しています。ラーニングスイッチと
の主な差分は、たったこれだけです。

*** Counterクラス
=Counter= クラス（▼リスト9-2）はトラフィックモニタのために新たに導入
したクラスで、 =TrafficMonitor= クラスが収集したトラフィック情報を集計
します。

○リスト9-2：トラフィックを記録し集計するCounterクラス（counter.rb）

#+BEGIN_SRC ruby
  class Counter
    def initialize
      @db = {}
    end

    def add(mac, packet_count, byte_count)
      @db[mac] ||= { packet_count: 0, byte_count: 0 }
      @db[mac][:packet_count] += packet_count
      @db[mac][:byte_count] += byte_count
    end

    def each_pair(&block)
      @db.each_pair(&block)
    end
  end
#+END_SRC

このクラスは次の2つのパブリックメソッドを持ちます：

- =add= メソッド：収集したトラフィック情報を記録する。ホストごと（MAC
  アドレスで区別）に、送信パケット数とバイト数を記録する
- =each_pair= メソッド：集計情報をホストごとに処理するときに使うループ
  （の一種）。ここでは見慣れない文法を使っているので、詳しくは以降の
  「即席Ruby入門」で後述

それでは動作のイメージをつかむため、細かい実装の解説は後回しにしてさっ
そく実行してみましょう。

** 実行してみよう
仮想ネットワークを使って、▼図9-2に示す仮想スイッチ1台、仮想ホスト2台
の構成でトラフィックモニタを起動してみましょう。リスト9-3の内容の仮想
ネットワーク設定を =traffic-monitor.conf= として保存します。

#+CAPTION: トラフィックモニタを実行する仮想ネットワーク環境
#+LABEL: fig:traffic_monitor_setup
[[./images/traffic_monitor/traffic_monitor_setup.png]]

○リスト9-3：仮想スイッチ0xabcに仮想ホストhost1、host2を接続
#+BEGIN_SRC ruby
  vswitch { datapath_id '0xabc' }

  vhost('host1') { mac '00:11:11:11:11:11' }

  vhost('host2') { mac '00:22:22:22:22:22' }

  link '0xabc', 'host1'
  link '0xabc', 'host2'
#+END_SRC

次のように =trema run= の =-c= オプションにこの設定ファイルを渡してト
ラフィックモニタを実行します。トラフィックモニタはスイッチにつながった
ホストからのトラフィックを検知し、ホストごとに集計して表示します。ただ
し起動直後ではまだトラフィックは発生していないので、画面には何も出力さ
れません。

#+BEGIN_SRC bash
% trema run ./traffic-monitor.rb -c ./traffic-monitor.conf ▼<Enter>
#+END_SRC

それでは、実際にトラフィックを発生させて集計されるか見てみましょう。別
のターミナルを開き、 =send_packets= コマンドを使ってhost1とhost2の間で
テストパケットを送ってみます。

#+BEGIN_SRC bash
% trema send_packets --source host1 --dest host2 --n_pkts 10 --pps 10 ▼<Enter>
% trema send_packets --source host2 --dest host1 --n_pkts 10 --pps 10 ▼<Enter>
#+END_SRC

=trema run= を実行した元のターミナルに、次のように出力されていれば成功
です。

#+BEGIN_SRC bash
% trema run ./traffic-monitor.rb -c ./traffic-monitor.conf ▼<Enter>
……
00:11:11:11:11:11 10 packets (640 bytes)
00:22:22:22:22:22 10 packets (640 bytes)
……
#+END_SRC

host1とhost2ごとに10パケットずつ送信したことが、コントローラからきちん
と検知されています。

トラフィックモニタの動作イメージがわかったところで、ソースコードの解説
に移りましょう。まずはこの章で新しく登場したRubyの構文を紹介します。

** 即席Ruby入門
今回学ぶのは次の3つです。

1. 別の.rbファイルからクラス定義を読み込む方法
2. 変数を初期化するときの便利なイディオム
3. メソッドにブロックを渡す方法

それぞれ順番に見ていきましょう。

*** requireでクラス定義を読み込む
あるファイルから別のファイルを読み込むときに使うのが =require= です。
ちょうど、Cの =#include= やJavaの =import= みたいなものと思ってくださ
い。Rubyでは、たとえばcounter.rbというファイルを読み込みたいときは、末
尾の.rbを外して =require 'counter'= と書きます。

=require= について覚えるのはこれだけです。あとはとりあえず、読み込むファ
イルと読み込まれるファイルはどちらも同じディレクトリに置いておく、と覚
えておけば十分です。

*** 変数を初期化するときの便利なイディオム
=Counter= クラスの =add= メソッドに見慣れない演算子 =||== が出てきたの
に気づいたでしょうか？

#+BEGIN_SRC ruby
  @db[mac] ||= { packet_count: 0, byte_count: 0 }
  @db[mac][:packet_count] += packet_count
  @db[mac][:byte_count] += byte_count
#+END_SRC

1行目の意味は、「もし =@db[mac]= が空だったら、 =packet_count: 0,
byte_count: 0= というハッシュテーブルを代入する」という意味です。これ
だけだとわかりづらいと思うので、今まで使った文法で書き直すと次のように
なります。

#+BEGIN_SRC ruby
  if @db[mac].nil?
    @db[mac] = { packet_count: 0, byte_count: 0 }
  end
  @db[mac][:packet_count] += packet_count
  @db[mac][:byte_count] += byte_count
#+END_SRC

なぜ =@db[mac]= が空 (=nil=) かそうでないかをいちいちチェックするの
でしょうか？ =@db= はもともと空のハッシュテーブルとして初期化されてい
て、キーはホストのMACアドレス、そしてバリューにはさらにパケット数とバ
イト数のハッシュテーブルを持つという二重のハッシュテーブルになっていま
す。 =add= メソッドが呼ばれるたびにパケット数とバイト数をホストごとに
追加するわけですが、もし次のように知らないMACアドレスに対してデータを
いきなり追加するとエラーになります。

#+BEGIN_SRC ruby
  @db['UNKNOWN_MAC_ADDRESS'][:packet_count] += 10 # エラー!
#+END_SRC

なぜならば、 =@db[知らないMACアドレス]= の値は =nil= ですので、これに
対して =[:packet_count]= のようなハッシュテーブル扱いはできないからで
す。そこで、もし =@db[MACアドレス]= の中身が =nil= だったらパケット数
とバイト数がゼロのハッシュテーブルとして初期化し、空でなければ足す、と
いう処理が必要です。これを最初のコードのように一発で書けるのが =||==
というわけです。

*** メソッドにブロックを渡す方法
トラフィックモニタの =show_counter= メソッドでは次のようにカウンタ情報
を表示するのにブロック (=do ... end=) を使っていました。

#+BEGIN_SRC ruby
  @counter.each_pair do |mac, counter|
    puts "#{mac} #{counter[:packet_count]} packets (#{counter[:byte_count]} bytes)"
  end
#+END_SRC

=@counter.each_pair= はハッシュテーブル (=@counter=) のキー／バリュー
のそれぞれのペアに対して、続くブロックで示す処理をせよ、という意味です。
=do= の後に続くブロックがその処理の内容で、たとえばもしハッシュテーブ
ルにキー／バリューのペアが100個あればそれぞれに対してこのブロックが計
100回実行されます。 =do= の右側の =|mac, counter|= は仮引数で、ハッシュ
テーブルのキー／バリューの値がそれぞれ入ります。そして、ブロック内の
putsでトラフィック情報を表示しているというわけです。

ブロックを引数に取るメソッドの定義方法も説明しておきましょう。
=Counter= クラスの =each_pair= では引数に =&block= というアンパサンド
が頭についた仮引数がありますが、これがブロック引数です。ここでは、引数
として渡されたブロックを =Hash= クラスの同じ名前のメソッド =each_pair=
に丸投げしています。

#+BEGIN_SRC ruby
  def each_pair(&block)
    @db.each_pair(&block)
  end
#+END_SRC

Rubyプログラマはこのようにブロックをたくさん使いますが、本書の範囲では
ブロックだと認識できれば十分です。より詳しく知りたい方は、第5章の参考
文献で挙げたRubyの参考書を参照してください。

** TrafficMonitorのソースコード
それでは、とくに重要なトラフィック情報収集の処理を詳しく見ていきましょ
う。ラーニングスイッチとの違いは、Packet Inハンドラでの処理とFlow Mod
をスイッチに打ち込む部分です。

*** Packet Inしたパケットをカウントする
フローテーブルに載っていない未知のパケットがPacket Inとして届くと、コ
ントローラはラーニングスイッチ相当の処理をした後、Packet Inしたパケッ
ト1つ分のトラフィック情報をカウンタに記録します（▼図9-3）。

#+CAPTION: Packet Inしたパケットもカウンタに記録する
#+LABEL: fig:packet_in
[[./images/traffic_monitor/packet_in.png]]

実際のトラフィックモニタのコードでは、次のようにPacket Inを送ったホス
トのMACアドレス (=message.macsa=) と、パケットの数1つ、そしてパケット
の長さ (=message.total_len=) をカウンタに記録しています。

#+BEGIN_SRC ruby
  def packet_in(datapath_id, message)
    # (ラーニングスイッチと同じ処理)
    # ...

    @counter.add message.macsa, 1, message.total_len
  end
#+END_SRC

もしこれを忘れると、Packet Inを起こしたパケットのトラフィック情報が集
計されなくなるので、得られるトラフィック情報が実際よりも若干少ない値に
なってしまいます。注意してください。

*** フローエントリのタイムアウトを設定する
トラフィックモニタのコードではFlow Modを打つとき、次のように
=:hard_timeout= オプションを追加で設定していました。

#+BEGIN_SRC ruby
  def flow_mod(datapath_id, message, port_no)
    send_flow_mod_add(
      datapath_id,
      hard_timeout: 10,
      match: ExactMatch.from(message),
      actions: SendOutPort.new(port_no)
    )
  end
#+END_SRC

このオプションを設定すると、書き込まれてからの秒数がこの値に逹したフロー
エントリを強制的に消します。つまり、この例ではFlow Modからきっかり10秒
後にFlow Removedメッセージがコントローラまで上がることになります。トラ
フィックモニタのようにトラフィック情報を定期的に取得したい場合には、
=:hard_timeout= を使うと良いでしょう。

タイムアウトにはこの他にもアイドルタイムアウト (=:idle_timeout=) とい
うオプションもあります（第3章）。これは、フローエントリが参照されない
時間（アイドル時間）がこの寿命に逹すると消す、というものです。このオプ
ションは主に、一定期間使われていないフローエントリを消すことでフローテー
ブルの容量を節約したい時に使います。

*** Flow Removedメッセージを捕捉する
Flow RemovedメッセージはPacket Inや他のメッセージと同じく、ハンドラで
捕捉できます。トラフィックモニターのコードでは、次のようにFlow Removed
ハンドラの中でFlow Removedメッセージに含まれるトラフィック情報をカウン
タに集計していました。

#+BEGIN_SRC ruby
  def flow_removed(datapath_id, message)
    @counter.add message.match.dl_src, message.packet_count, message.byte_count
  end
#+END_SRC

注意すべき点は、パケットの送信元MACアドレスの取得方法です。この情報は
フローエントリのマッチングルールに入っているので、上のように
=message.match.dl_src= として取得します。この他Flow Removedメッセージ
に含まれる情報についてはTrema Ruby APIを参照してください。

** まとめ
ラーニングスイッチの応用として、「トラフィック集計機能付きスイッチ」を
実現するコントローラを書きました。

- トラフィック情報はフローエントリが消えるときに発生するFlow Removedメッ
  セージの中身を調べることで集計できる
- Flow Removedメッセージを発生させるためのフローエントリの寿命は、Flow
  Modメッセージのタイムアウトオプションとして指定できる

続く2つの章では、Part 2プログラミング編の締めくくりとしてルータを
OpenFlowで作ります。今までに学んできたOpenFlowやRubyプログラミングの知
識を総動員しましょう。
