#+TITLE: スイッチ監視ツール
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* スイッチ監視ツール
#+BEGIN_VERSE
OpenFlowの一番の特長は、たくさんのスイッチをひとつのコントローラで集中
制御できることです。その雰囲気を簡単なOpenFlowコントローラを書いて体験
してみましょう。
#+END_VERSE

** ネットワークを集中管理しよう
OpenFlowの特長は「たくさんのスイッチをひとつのコントローラで集中制御で
きる」という点にありました。スイッチにはフローテーブルに従ったパケット
の転送という単純な仕事だけをやらせ、頭脳であるコントローラが全体のフロー
テーブルを統括するというわけです。これによって第I部で見てきたように、
自動化やシステム連携のしやすさ、ネットワークトラフィック制御の容易さ、
そしてソフトウェア開発のテクニックやツールの応用といったさまざまなメリッ
トが生まれるのでした。

本章ではこの集中制御の一例として、スイッチの監視ツールを作ります。この
ツールは「今、ネットワーク中にどんなスイッチが動いているか」をリアルタ
イムに表示します。たくさんあるスイッチ全体が正常に動いているかを確認す
るのに便利です。

#+CAPTION: スイッチ監視ツール
#+LABEL: fig:switch_monitor_overview
[[./ja/images/switch_monitoring_tool/switch_monitor_overview.png]]

スイッチ監視ツールは [[fig:switch_monitor_overview]] のように動作します。
OpenFlowスイッチは、起動すると指定したOpenFlowコントローラへ接続します。
コントローラはスイッチの接続を検知すると、起動したスイッチの情報を表示
します。逆にスイッチが予期せぬ障害など何らかの原因で接続を切った場合、
コントローラはこれを検知して警告を表示します。また現在接続しているスイッ
チの一覧を一定時間ごとに表示することによって、何らかの障害で落ちてしまっ
たスイッチを発見したり、予期しないスイッチがネットワークに接続されてい
ることをネットワーク管理者が発見できるようにします。

** SwitchMonitorコントローラ
まずはざっとスイッチ監視ツールのソースコード
(@<list>{switch-monitor.rb})を眺めてみましょう。このソースコードは
Tremaのサンプルアプリに付属する@<tt>{switch_monitor/switch-monitor.rb}
でも読むことができます。今回もRubyの文法は後まわしで先に実行してみます
ので、細かいところは気する必要はありません。
@<chap>{openflow_framework_trema}で学んだRubyの品詞を頭の片隅に置きな
がら、ざっくりと次のコードに目を通してみてください。

//list[switch-monitor.rb][スイッチ監視ツール (@<tt>{switch-monitor.rb}) のソースコード]{

#+BEGIN_SRC ruby
class SwitchMonitor < Controller
  periodic_timer_event :show_switches, 10

  def start
    @switches = []
  end

  def switch_ready( datapath_id )
    @switches << datapath_id.to_hex
    info "Switch #{ datapath_id.to_hex } is UP"
  end

  def switch_disconnected( datapath_id )
    @switches -= [ datapath_id.to_hex ]
    info "Switch #{ datapath_id.to_hex } is DOWN"
  end

  private

  def show_switches
    info "All switches = " + @switches.sort.join( ", " )
  end
end
#+END_SRC

新しい品詞や構文がいくつかありますが、今までに学んだ知識だけでこのRuby
ソースコードの構成はなんとなくわかったはずです。まず、スイッチ監視ツー
ルの本体は@<tt>{SwitchMonitor}という名前のクラスです。そしてこのクラス
にはいくつかハンドラメソッドが定義してあるようです。おそらくそれぞれが
スイッチの接続や切断イベントを処理しているんだろう、ということが想像で
きれば上出来です。

*** 実行してみよう
それでは早速実行してみましょう。でも、スイッチ監視ツールを試すには実際
にOpenFlowスイッチを何台か接続してみなければなりません。どうすればいい
でしょうか？

なんと、Tremaを使えばOpenFlowスイッチを持っていなくてもこうしたコント
ローラを実環境さながらに実行できます。その秘密はTremaの強力な機能の1つ、
仮想ネットワーク機能にあります。これは仮想的なスイッチやホストからなる
仮想ネットワークを開発マシン内に作ってしまう機能です。この仮想ネットワー
クを使えば、実際のOpenFlowスイッチを用意しなくとも開発マシン内でコント
ローラをテストできるのです。しかも、こうして開発したコントローラは実際
のネットワークでもそのまま動作します！

この仮想ネットワーク機能を使うには、まずはそのネットワーク構成を設定ファ
イルとして書く必要があります。たとえば、仮想スイッチ1台からなる仮想ネッ
トワークを設定ファイルは次のように書きます。

#+BEGIN_SRC ruby
vswitch { datapath_id 0xabc }
#+END_SRC

@<tt>{vswitch}で始まる行が1台の仮想スイッチに対応します。続く波括弧
(@<tt>{{}}) 内で指定されている@<tt>{datapath_id}(@<tt>{0xabc})は、仮想
スイッチを識別するための16進数の値です。これはちょうどネットワークカー
ドにおけるMACアドレスのような存在で、スイッチを一意に特定するIDとして
使われます。OpenFlowの仕様によると、この値には64ビットの一意な整数値を
割り振ることになっています。仮想スイッチでは好きな値を設定できるので、
もし仮想スイッチを複数台作る場合にはお互いがぶつからないように注意して
ください。

基本がわかったところで、試しに仮想スイッチ3台の構成でスイッチ監視ツー
ルを起動してみましょう。次の内容の設定ファイルを
@<tt>{switch-monitor.conf}として保存してください。なお、それぞれの
@<tt>{datapath_id}がお互いにかぶらないように@<tt>{0x1}、@<tt>{0x2}、
@<tt>{0x3}と連番を振っていることに注意してください。

#+BEGIN_SRC ruby
vswitch { datapath_id 0x1 }
vswitch { datapath_id 0x2 }
vswitch { datapath_id 0x3 }
#+END_SRC

@<tt>{switch-monitor.rb}コントローラをこの仮想ネットワーク内で実行する
には、この設定ファイルを@<tt>{trema run}の@<tt>{-c}オプションに渡しま
す。スイッチ監視ツールの出力は次のようになります。

#+BEGIN_SRC bash
% trema run ./switch-monitor.rb -c ./switch-monitor.conf
Switch 0x3 is UP
Switch 0x2 is UP
Switch 0x1 is UP
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
……
#+END_SRC

最初の3行で (@<tt>{Switch 0x1 is UP}などの行)、仮想ネットワーク設定ファ
イルに定義したスイッチ3台が検出されていることがわかります 。また、一定
時間ごとにスイッチ一覧が出力されています(@<tt>{All switches = 0x1,
0x2, 0x3}の行)。どうやらスイッチ監視ツールはうまく動いているようです。
このように実際にスイッチを持っていなくても、設定ファイルを書くだけでス
イッチを何台も使ったコントローラの動作テストができました!@<tt>{vswitch
{ }}の行を増やせば、スイッチをさらに5台、10台…と足していくことも思い
のままです。

**** [column] 友太郎の質問: Datapath ってどういう意味？
実用的には"Datapath=OpenFlowスイッチ"と考えて問題ありません。

"データパス"で検索すると、「CPUは演算処理を行うデータパスと、指示を出
すコントローラから構成されます」というハードウェア教科書の記述がみつか
ります。つまり、ハードウェアの世界では一般に

- 筋肉にあたる部分=データパス
- 脳にあたる部分=コントローラ

という分類をするようです。

OpenFlow の世界でもこれと同じ用法が踏襲されています。OpenFlowのデータ
パスはパケット処理を行うスイッチを示し、その制御を行うソフトウェア部分
をコントローラと呼びます。

*** 仮想スイッチを停止／再起動してみる
それでは、スイッチの切断がうまく検出されるか確かめてみましょう。仮想ス
イッチを停止するコマンドは@<tt>{trema kill}です。@<tt>{trema run}を実
行したターミナルはそのままで別ターミナルを開き、次のコマンドで仮想スイッ
チ@<tt>{0x3}を落としてみてください。

#+BEGIN_SRC bash
% trema kill 0x3
#+END_SRC

すると、@<tt>{trema run}を動かしたターミナルで新たに@<tt>{"Switch 0x3
is DOWN"}の行が出力されているはずです。

#+BEGIN_SRC bash
% trema run ./switch-monitor.rb -c ./switch-monitor.conf
Switch 0x3 is UP
Switch 0x2 is UP
Switch 0x1 is UP
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
……
Switch 0x3 is DOWN
#+END_SRC

うまくいきました！それでは、逆にさきほど落とした仮想スイッチを再び起動
してみましょう。仮想スイッチを起動するコマンドは@<tt>{trema up}です。

#+BEGIN_SRC bash
% trema up 0x3
#+END_SRC

@<tt>{"Switch 0x3 is UP"}の行が出力されれば成功です。

#+BEGIN_SRC bash
% trema run ./switch-monitor.rb -c ./switch-monitor.conf
Switch 0x3 is UP
Switch 0x2 is UP
Switch 0x1 is UP
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
All switches = 0x1, 0x2, 0x3
……
Switch 0x3 is DOWN
……
Switch 0x3 is UP
#+END_SRC

このように、@<tt>{trema kill}と@<tt>{trema up}は仮想ネットワークのスイッ
チを制御するためのコマンドです。引数にスイッチのDatapath IDを指定する
ことで、スイッチを停止または起動してコントローラの反応を確かめることが
できます。

- @<tt>{trema kill [Datapath ID]}：指定した仮想スイッチを停止する
- @<tt>{trema up [Datapath ID]}：指定した仮想スイッチを起動する

#@warn(リンクを切ったりつなげたりする例をトポロジの章で紹介 & Hello Trema の章からも引用)

スイッチ監視ツールの動作イメージがわかったところで、そろそろソースコー
ドの解説に移りましょう。まずはスイッチ監視ツールのソースコードで使う
Rubyの品詞や構文を頭に入れておきましょう。

** 即席Ruby入門
スイッチ監視ツールのソースコード(@<list>{switch-monitor.rb})を眺めると、
いくつか見慣れない品詞や構文が登場していることに気付きます。この節では
順にそれぞれを紹介していきますが、最初からすべてを覚える必要はありませ
ん。もし後でわからなくなったときには見直すようにしてください。

*** シンボル
#@warn(以下の説明に出てくる、文字列とメソッドの引数をまだ説明していない)

シンボルは文字列の軽量版と言える品詞です。英字、数字、アンダースコアを
含めることができますが、@<tt>{:a} や @<tt>{:number} や
@<tt>{:show_switches} のように必ずコロンで始めることになっています。シ
ンボルは定数のように一度決めると変更できないので、文字列のようにいつの
間にか書き変わっている心配がありません。このため、ハッシュテーブルの検
索キーとしてよく使われます。

また、シンボルは誰かにメソッドを名前で渡すときにも登場します。これだけ
ですと分かりづらいと思うので、具体的な例を見ていきましょう。
@<list>{switch-monitor.rb}には、次のようにシンボルを使っている箇所があ
りました。

#+BEGIN_SRC ruby
periodic_timer_event :show_switches, 10
#+END_SRC

この@<tt>{:show_switches}は@<tt>{SwitchMonitor}クラスのメソッド名です。
ここでやっていることを簡単に言うと、@<tt>{periodic_timer_event}の引数
として@<tt>{show_switches}メソッドの名前を渡しています。

もしここでシンボルを使わずに、直接次のように指定するとどうなるでしょう
か？

#+BEGIN_SRC ruby
# まちがい!
periodic_timer_event show_switches, 10
#+END_SRC

これではうまく動きません。なぜならば、ソースコードの中に
@<tt>{show_switches}とメソッドの名前を書いた時点でそのメソッドが実行さ
れてしまい、その返り値が@<tt>{periodic_timer_event}へと渡されてしまう
からです。

そこで、もしソースコード中でメソッドの名前を誰かに渡すときには、かなら
ずシンボルにすることで実行されないようにして渡します。これがシンボルが
よく使われるもう1つの用途です。

*** インスタンス変数
アットマーク(@<tt>{@})で始まる語はインスタンス変数です。@<tt>{@x}や
@<tt>{@age}や@<tt>{@switches}がそれに当たります。これらの変数はたとえ
ば人間の歳や身長などといった属性を定義するときによく使われます。アット
マークはアトリビュート(属性)を意味すると考えれば覚えやすいでしょう。

インスタンス変数は同じクラスの中のメソッド定義内であればどこからでも使
えます。具体的な例として次の@<tt>{Human}クラスを見てください。

#+BEGIN_SRC ruby
# 人間を表すクラス
class Human
  # 初期化。生まれたときは歳は0歳
  def initialize
    @age = 0
  end


  # 一年に一度、歳をとる
  def happy_birthday
    @age += 1
  end
end
#+END_SRC

@<tt>{Human}クラスで定義される@<tt>{Human}オブジェクトは、初期化したと
きにはそのインスタンス変数@<tt>{@age}は0、つまり0歳です。
@<tt>{happy_birthday}を呼び出すたびに歳をとり@<tt>{@age}が1インクリメ
ントします。このように@<tt>{@age}は@<tt>{initialize}および
@<tt>{happy_birthday}メソッドのどちらからでもその値を変更できます。

*** 配列
配列は角カッコで囲まれたリストで、カンマで区切られています。

- =[]= は空の配列
- =[1, 2, 3]= は数字の配列
- =['友太郎', '青井', '宮坂主任']= は文字列の配列

Rubyの配列はとても直感的に要素を足したり取り除いたりできます。たとえば
配列の最後に要素を加えるには =<<= を使います。

#+BEGIN_SRC ruby
  members = ['友太郎', '青井', '宮坂主任']
  members << '取間先生'
  # => ["友太郎", "青井", "宮坂主任", "取間先生"]
#+END_SRC

配列から要素を取り除くには ~-=~ を使います。これは左右の配列どうしを見
比べ、共通する要素を取り除いてくれます。

#+BEGIN_SRC ruby
  fruits = ['バナナ', 'みかん', 'テレビ', 'りんご', 'たわし']
  fruits -= ['テレビ', 'たわし']
  # => [ "バナナ", "みかん", "りんご" ]
#+END_SRC

配列はRubyで多用するデータ構造で、この他にもたくさんの操作があらかじめ
定義されています。もし詳しく知りたい人は第5章の参考文献で紹介したRuby
のサイトや書籍を参照してください。

*** メソッド呼び出し
定数や変数が名詞なら、メソッドは動詞です。メソッドは普通、変数や定数の
後にドットでつなげます。

#+BEGIN_SRC ruby
door.open
#+END_SRC

上の例では @<tt>{open} がメソッドです。英語の open は動詞なので、当然
メソッドであるとも言えます。@<br>{}

ふつう、メソッド呼び出しによって何らかの動作をすると新しい結果が得られ
ます。

#+BEGIN_SRC ruby
  'redrum'.reverse
  # => "murder"
#+END_SRC

この場合、文字列がひっくりかえり新しい文字列が返ってきました。@<br>{}

質問すると答を返してくれることもあります。

#+BEGIN_SRC ruby
  ['卵'].empty?
  # => false
#+END_SRC

要素が一つの配列(@<tt>{[ "卵" ]})は空ではないので@<tt>{false}(偽)が返っ
てきました。@<br>{}

メソッドは引数を取るものもあります。次の例は配列の各要素の間に指定した
文字をはさんで連結(@<tt>{join})します。

#+BEGIN_SRC ruby
  ['M', 'A', 'S', 'H'].join('★')
  # => "M★A★S★H"
#+END_SRC

Rubyにはこのような組込みメソッドが何百種類もあります。それぞれの動作は
名前から大体想像できるものがほとんどです。@<br>{}

さて、今回は少し長くなりましたがこれで必要なRubyの勉強は終わりです。わ
からなくなったらいつでも戻って読み返してください。

** SwitchMonitorのソースコード
それではスイッチ監視ツールのソースコードを読み解いていきましょう。今回
の肝となるのは、スイッチの接続と切断イベントをハンドラで検知する部分と、
スイッチ一覧を一定時間ごとに表示する部分です。Tremaはスイッチの接続と
切断を捕捉するための2つのハンドラメソッドを提供しています。

- @<tt>{switch_ready}：OpenFlowスイッチは、起動するとOpenFlowコントロー
  ラへ接続しにいく。コントーラはスイッチとの接続が確立すると
  @<tt>{switch_ready}ハンドラが呼ばれ、引数にはスイッチのDatapath IDが
  渡される
- @<tt>{switch_disconnected}：スイッチが障害など何らかの原因でコントロー
  ラとの接続を切った場合、コントローラの@<tt>{switch_disconnected}ハン
  ドラが呼ばれ、引数にはスイッチのDatapath IDが渡される

*** [column] 取間先生曰く：@<tt>{switch_ready}の中身
実はOpenFlowの仕様には@<tt>{switch_ready}というメッセージは定義されて
いません。実は、これはTremaが独自に定義するイベントなのです。
@<tt>{switch_ready}の裏では@<img>{switch_ready}に示す一連の複雑な処理
が行われていて、Tremaがこの詳細をうまくカーペットの裏に隠してくれてい
るというわけです。

//image[switch_ready][@<tt>{switch_ready} イベントが起こるまで][width=12cm]

最初に、スイッチとコントローラがしゃべるOpenFlowプロトコルが合っている
か確認します。OpenFlowのHelloメッセージを使ってお互いにプロトコルバー
ジョンを知らせる、うまく会話できそうか判断します。

次は、スイッチを識別するためのDatapath IDの取得です。Datapath IDのよう
なスイッチ固有の情報は、スイッチに対してOpenFlowのFeatures Requestメッ
セージを送ることで取得できます。成功した場合、Datapath IDやポート数な
どの情報がFeatures Replyメッセージに乗ってやってきます。

最後にスイッチを初期化します。スイッチに以前の状態が残っているとコント
ローラが管理する情報と競合が起こるので、スイッチを初期化することでこれ
を避けます。これら一連の処理が終わると、ようやく@<tt>{switch_ready}が
コントローラに通知されるというわけです。

*** スイッチの起動を捕捉する
@<tt>{switch_ready}ハンドラでは、スイッチ一覧リストに新しく接続したス
イッチのDatapath IDを追加し、接続したスイッチの情報を画面に表示します。

#+BEGIN_SRC ruby
class SwitchMonitor < Controller
  # ...

  def start
    @switches = []
  end


  def switch_ready( datapath_id )
    @switches << datapath_id.to_hex
    info "Switch #{ datapath_id.to_hex } is UP"
  end

  # ...
end
#+END_SRC

@<tt>{@switches}は現在起動しているスイッチのDatapath IDを管理するイン
スタンス変数で、@<tt>{start}ハンドラで空の配列に初期化されます。新しく
スイッチが起動すると@<tt>{switch_ready}ハンドラが起動し、
@<tt>{@switches}が保持する配列の最後にそのDatapath IDを追加します。ま
た、@<tt>{info}メソッドで新しいスイッチのDatapath IDを表示します。

**** Datapath IDを16進にする
@<tt>{to_hex}は整数を16進の文字列に変換するメソッドです。
@<tt>{switch_ready}ハンドラの引数@<tt>{datapath_id}の値は@<tt>{65531}
のような整数ですが、Datapath ID は@<tt>{0xfffb}のように16進で書くこと
が多いため画面に表示する場合は16進変換しておいたほうが良いでしょう。

**** ログを出力する
@<tt>{info}メソッドはTremaが提供するロギングメソッドです。他にも、出力
するメッセージの重要度に応じたさまざまなロギングメソッドが用意されてい
ます。

- @<tt>{critical}：回復不能なエラー
- @<tt>{error}：エラー
- @<tt>{warn}：警告
- @<tt>{notice}：注意が必要な情報
- @<tt>{info}：通常レベルの情報
- @<tt>{debug}：デバッグ出力

メッセージはコントローラのログファイル
(@<tt>{[trema]/tmp/log/SwitchMonitor.log})に出力されます。@<tt>{trema
run}をフォアグラウンドで実行している場合にはターミナルにも出力されます。

**** 文字列を連結する
@<tt>{info}に渡される文字列中の@<tt>{#{...\}}は、文字列内にRubyの式を
組込む文法です。

#+BEGIN_SRC ruby
info "Switch #{ datapath_id.to_hex } is UP"
#+END_SRC

これは次のコードと同じです。

#+BEGIN_SRC ruby
info "Switch " + datapath_id.to_hex + " is UP"
#+END_SRC

どちらを使ってもかまいませんが、@<tt>{+}による文字列の連結を使いすぎる
と最終的な出力がわかりにくくなることがあるため、このように
@<tt>{#{...\}}で組み込んだ方が良いこともあります。

*** スイッチの切断を捕捉する
=switch_disconnected= ハンドラでは、スイッチ一覧リストから切断したスイッ
チのDatapath IDを削除し、切断したスイッチの情報を画面に表示します。

#+BEGIN_SRC ruby
  def switch_disconnected(datapath_id)
    @switches -= [datapath_id.to_hex]
    info "Switch #{datapath_id.to_hex} is DOWN"
  end
#+END_SRC

ここでは =switch_ready= とは逆に、配列の引き算(=-\==)で切断したスイッ
チのDatapath IDを =@switches= から除いていることに注意してください。

*** スイッチ一覧を一定時間ごとに表示する
#@warn(クラスメソッドの説明)

最後に、スイッチの一覧を一定時間ごとに表示する部分です。このようにいわ
ゆるタイマー処理を行いたい場合には、Tremaのタイマー機能を使います。次
のように@<tt>{periodic_timer_event}に続いて一定間隔ごとに呼び出したい
メソッドのシンボル名、間隔を秒数で指定しておくと、指定したメソッドが指
定された間隔ごとに呼ばれます。

#+BEGIN_SRC ruby
class Human < Controller
  # 1年(31536000 秒)ごとにhappy_birthdayメソッドを呼ぶ
  periodic_timer_event :happy_birthday, 31536000
#+END_SRC

この定義はクラス名定義の直後に来るので、まるでクラス属性としてタイマー
がセットされているように読めることに注目してください。このようにTrema
ではタイマー処理も短く読みやすく書けるのです。

タイマーで呼び出すメソッドは、通常クラスの外からは呼びませんのでよくプ
ライベートメソッドとして定義されます。Rubyでは@<tt>{private}と書いた行
以降のメソッドはプライベートメソッドとして定義され、クラスの外からは見
えなくなります。

#+BEGIN_SRC ruby
  class Human < Trema::Controller
    periodic_timer_event :happy_birthday, 31536000

    private

    def happy_birthday
      @age += 1
    end
  end
#+END_SRC

これを踏まえてスイッチ監視ツールのソースコードのタイマー部分を見てみま
しょう。

#+BEGIN_SRC ruby
  class SwitchMonitor < Controller
    periodic_timer_event :show_switches, 10

    # ...

    private

    def show_switches
      info 'All switches = ' + @switches.sort.join(', ')
    end
  end
#+END_SRC

クラス名定義直後のタイマー定義より、10秒ごとに@<tt>{show_switches}メソッ
ドを呼んでいることがわかります。@<tt>{show_switches}メソッドでは、見や
すい出力を得るためにスイッチのDatapath IDのリスト(@<tt>{@switches})を
アルファベット順にソートし(@<tt>{sort})、カンマでつなげて(@<tt>{join})
表示するという工夫をしています。なおこの@<tt>{sort}と@<tt>{join}は、と
もにRubyが提供する配列のメソッドです。

** まとめ
この章ではスイッチの動作状況を監視するスイッチ監視ツールを作りました。
また、作ったスイッチ監視ツールをテストするためTremaの仮想ネットワーク
機能を使いました。

- スイッチの起動と切断を捕捉するには、@<tt>{switch_ready}と
  @<tt>{switch_disconnected}ハンドラメソッドを定義する
- タイマー(@<tt>{periodic_timer_event})を使うと一定間隔ごとに指定した
  メソッドを起動できる
- 仮想ネットワーク機能を使うとOpenFlowスイッチを持っていなくてもコント
  ローラのテストができる

今回作ったスイッチ監視ツールのように、比較的短いソースコードでもそこそ
こ実用的なツールを書けるところがTrema+OpenFlowの魅力です。続く章では、
もう1つの便利ツールの例として遠隔操作可能なソフトウェアパッチパネルを
作ります。ネットワークケーブルを挿し替えるためだけにラックのあるサーバ
ルームまで出向く必要はなくなります。
