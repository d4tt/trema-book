#+TITLE: シンプルなルータ（前編）
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* シンプルなルータ（前編）
#+BEGIN_VERSE
今まで学んだ知識を総動員して、ラーニングスイッチよりも高度なルータの実
装に挑戦しましょう。まずは、スイッチとルータの違いをきちんと理解するこ
とからスタートです。
#+END_VERSE

** ルータとスイッチの違いは？
ルータとスイッチの違いを一言で言うと、スイッチはパケットの転送にMACア
ドレスを使う一方で、ルータはIPアドレスを使うという点です。なぜ、ルータ
はIPアドレスを使うのでしょうか？ MACアドレスだけでパケットが届くなら、
わざわざIPアドレスを使う必要はありません。実はこれらの違いには、ちゃん
とした理由があるのです。

MACアドレスを使ってパケットを転送するLANをイーサネットと呼びます。ネッ
トワークを実装のレベルに応じて分類すると、イーサネットはハードウェアに
近いレベルのネットワークです。なぜかと言うと、イーサネットがパケットの
転送に使うMACアドレスは、ハードウェアであるネットワークカードを識別す
る情報だからです。このMACアドレスは、パケットのイーサネットヘッダと呼
ばれる部分に格納されます。

実は、イーサネットと同じくハードウェアに近いレベルのパケット転送方式は
他にもいくつもあります。つまりイーサネットは、次に挙げるいくつもある転
送方式のうちの、たった1つにすぎないのです。

- ADSLや光ファイバーによるインターネット接続に使うPPP（Point to Point
  Protocol）。身近に使われている
- WANで使われるATM（Asynchronous Transfer Mode）やフレームリレー。利用
  は徐々に減りつつある
- リング型のネットワークを構成するFDDI（Fiber-Distributed Data
  Interface）。大学の計算機室のワークステーション間をつなげるためによ
  く使われていた

このような異なるネットワーク同士をつなぐために考え出されたのがIP、つま
りインターネットプロトコルです。インターネットはその名のとおり、ネット
とネットの間（inter）をつなぐ技術で、イーサネットやその他のネットワー
クの一段上に属します。ルータはインターネットプロトコルでの識別情報であ
るIPアドレスを使って、より低いレベルのネットワーク同士をつなぐのです。

** イーサネットだけならルータは不要？
ほとんどのネットワークがイーサネットなら、わざわざルータで中継するのは
なぜだろう？ これがもう1つの疑問です。現に、OpenFlowのマッチングルール
で扱えるのはMACアドレスなどイーサネットの情報だけで、PPPやATMといった
他のネットワークは対象外です。もしイーサネットだけを使うのであれば、ルー
タは不要なのでしょうか？

実際には、大きなネットワークをイーサネットだけで作るには次の問題があり
ます。

- ブロードキャストの問題 ::
     ネットワーク上の情報の発見などのためにブロードキャストパケットを
     送ると、ネットワーク上のすべてのホストにこのパケットがばらまかれ
     る。もし大きいネットワーク内でみんながブロードキャストを送ってし
     まうと、ネットワークがパンクしてしまう
- セキュリティ上の問題 ::
     もし全体が1つのネットワークでどことでも自由に通信できてしまうと、
     他人の家や別の部署のホストと簡単に接続できてしまう。そうなると、
     プライバシー情報や機密データを守るのは大変になる

そこで、現実的にはイーサネットだけでネットワークを作る場合にも、家や会
社の部署といった単位で小さなネットワークを作り、それらをルータでつなぐ
場合が大半です。ルータがネットワーク間の「門番」としても働き、実際にパ
ケットを転送するかしないかを制御することで、上で挙げた2つの問題を解決
するのです。

** ルータの動作
ルータの存在意義がわかったところで、ルータの動作を詳しく見ていきましょ
う。おおざっぱに言って、ルータは複数のイーサネットをつなぐために、「イー
サネット間でのパケットの転送」と「正しく届けるのに必要なパケットの書き
換え」の2つの仕事を行います。

*** パケットを書き換えて転送する
▼図10-1のホストAがホストBにパケットを送る場合を考えます。ホストAは、
送信元IPアドレスがホストA、宛先IPアドレスがホストBのIPパケットを作りま
す。

このパケットをホストBに届けるためには、ルータに中継してもらわなくては
なりません。ルータにパケットを渡すために、ホストAは、パケット中の宛先
MACアドレスをルータのMACアドレスに、また送信元をホストAのMACアドレスに
して、出力します。このときのパケットの中身は、次のようになります。

#+CAPTION: ルータはパケットを転送するために、パケットのイーサネット部分だけを書き換える
#+LABEL: fig:forward
[[./images/router_part1/forward.png]]

ルータは、受け取ったパケットをホストBに届けるために、MACアドレスの書き
換えを行います。ルータは、パケットの宛先をホストBのMACアドレスに、送信
元をルータのMACアドレスに書き換えてから、書き換えたパケットをホストBへ
と転送します。

それでは、このパケットの書き換えと転送のために必要な処理を、1つひとつ
見ていきましょう。

**** ルータのMACアドレスを教える
ルータがパケットを受け取るためには、ホストはルータのMACアドレスを知る
必要があります。このためにホストAは、パケットを送る前にルータのMACアド
レスをARPリクエストで調べ、これを宛先MACアドレスとしてパケットに指定し
ます。ルータはARPリクエストを受け取ると、自身のMACアドレスをARPリプラ
イとして返します（▼図10-2）。

#+CAPTION: ルータはARPリクエストに対し自分のMACアドレスを応える
#+LABEL: fig:arp_reply
[[./images/router_part1/arp_reply.png]]

**** 宛先ホストのMACアドレスを調べる
ルータがパケットを宛先ホストに送るためには、宛先ホストのMACアドレスを
調べる必要があります（▼図10-3）。そこでルータは、宛先であるホストBの
MACアドレスを調べるためのARPリクエストをホストBへ送ります。このとき、
ルータは、ホストBのMACアドレスを知らないので、ARPリクエストの宛先MACア
ドレスにブロードキャストアドレス（FF:FF:FF:FF:FF:FF）を指定します。

#+CAPTION: 宛先ホストのMACアドレスを問い合わせる
#+LABEL: fig:arp_request
[[./images/router_part1/arp_request.png]]

ARPを使って調べたMACアドレスは、再利用するためにルータ内のARPテーブル
にキャッシュしておきます。これによって、同じホストに対してパケットを繰
り返し送る場合、何度もARPリクエストを送らなくてもすみます。

*** いくつものルータを経由して転送する
ルータが複数あるネットワークでの転送は、少し複雑になります（▼図10-4）。
たとえば、ホストAがホストBにパケットを送るとします。ルータAは受け取っ
たパケットを転送する必要がありますが、宛先であるホストBはルータAと直接
はつながっていません。そのため、ルータAはまずルータBにパケットを転送し、
ルータBがそのパケットをホストBへと転送します。

#+CAPTION: ルータが複数あるネットワークでの転送
#+LABEL: fig:router_network
[[./images/router_part1/router_network.png]]

ルータAの次の転送先となるルータは、パケットの宛先ごとに異なります。た
とえばホストAからホストCへパケットを送る場合には、ルータAはそのパケッ
トをルータCへと転送します。

次の転送先へと正しくパケットを送るために、各ルータは、宛先と次の転送先
の対応を記録したルーティングテーブルを持っています。たとえば、ルータA
のルーティングテーブルは、図10-4に示すようになります。

ここまでで、ルータの基本動作の説明はおしまいです。それでは、基本的なルー
タの機能を実装した、“シンプルルータ”のソースコードを読んでいきましょ
う。

** SimpleRouterのソースコード
シンプルルータ（SimpleRouter）のソースコードは、いくつかのファイルから
なります。紙面の都合上、以下ではメインのソースコード（▼リスト10-1）を
中心に説明します。残りのソースコードについては、Tremaの
=src/examples/simple_router/= 以下を参照してください。

○リスト10-1：シンプルルータ（simple-router.rb）のソースコード
#+BEGIN_SRC ruby
  require 'arp-table'
  require 'interface'
  require 'router-utils'
  require 'routing-table'

  class SimpleRouter < Controller
    include RouterUtils

    def start
      load 'simple_router.conf'
      @interfaces = Interfaces.new($interface)
      @arp_table = ARPTable.new
      @routing_table = RoutingTable.new($route)
    end

    def packet_in(dpid, message)
      return unless to_me?(message)
      if message.arp_request?
        handle_arp_request dpid, message
      elsif message.arp_reply?
        handle_arp_reply message
      elsif message.ipv4?
        handle_ipv4 dpid, message
      else
        # noop.
      end
    end

    private

    def to_me?(message)
      return true if message.macda.broadcast?

      interface = @interfaces.find_by_port(message.in_port)
      return true if interface && interface.has?(message.macda)
    end

    def handle_arp_request(dpid, message)
      port = message.in_port
      daddr = message.arp_tpa
      interface = @interfaces.find_by_port_and_ipaddr(port, daddr)
      return unless interface
      arp_reply = create_arp_reply_from(message, interface.hwaddr)
      packet_out dpid, arp_reply, SendOutPort.new(interface.port)
    end

    def handle_arp_reply(message)
      @arp_table.update message.in_port, message.arp_spa, message.arp_sha
    end

    def handle_ipv4(dpid, message)
      if should_forward?(message)
        forward dpid, message
      elsif message.icmpv4_echo_request?
        handle_icmpv4_echo_request dpid, message
      else
        # noop.
      end
    end

    def should_forward?(message)
      !@interfaces.find_by_ipaddr(message.ipv4_daddr)
    end

    def handle_icmpv4_echo_request(dpid, message)
      interface = @interfaces.find_by_port(message.in_port)
      saddr = message.ipv4_saddr.value
      arp_entry = @arp_table.lookup(saddr)
      if arp_entry
        icmpv4_reply = create_icmpv4_reply(arp_entry, interface, message)
        packet_out dpid, icmpv4_reply, SendOutPort.new(interface.port)
      else
        handle_unresolved_packet dpid, message, interface, saddr
      end
    end

    def forward(dpid, message)
      next_hop = resolve_next_hop(message.ipv4_daddr)

      interface = @interfaces.find_by_prefix(next_hop)
      return if !interface || interface.port == message.in_port

      arp_entry = @arp_table.lookup(next_hop)
      if arp_entry
        macsa = interface.hwaddr
        macda = arp_entry.hwaddr
        action = create_action_from(macsa, macda, interface.port)
        flow_mod dpid, message, action
        packet_out dpid, message.data, action
      else
        handle_unresolved_packet dpid, message, interface, next_hop
      end
    end

    def resolve_next_hop(daddr)
      interface = @interfaces.find_by_prefix(daddr.value)
      if interface
        daddr.value
      else
        @routing_table.lookup(daddr.value)
      end
    end

    def flow_mod(dpid, message, action)
      send_flow_mod_add(
        dpid,
        match: ExactMatch.from(message),
        actions: action
      )
    end

    def packet_out(dpid, packet, action)
      send_packet_out(
        dpid,
        data: packet,
        actions: action
      )
    end

    def handle_unresolved_packet(dpid, _message, interface, ipaddr)
      arp_request = create_arp_request_from(interface, ipaddr)
      packet_out dpid, arp_request, SendOutPort.new(interface.port)
    end

    def create_action_from(macsa, macda, port)
      [
        SetEthSrcAddr.new(macsa),
        SetEthDstAddr.new(macda),
        SendOutPort.new(port)
      ]
    end
  end
#+END_SRC

それでは、シンプルルータのソースコードの重要な部分を見ていきましょう。

*** Packet Inハンドラ
シンプルルータの主な動作はPacket Inハンドラから始まります。ハンドラ
=packet_in= の中身は、次のようになっています。

#+BEGIN_SRC ruby
  def packet_in(dpid, message)
    return unless to_me?(message)
    if message.arp_request?
      handle_arp_request dpid, message
    elsif message.arp_reply?
      handle_arp_reply message
    elsif message.ipv4?
      handle_ipv4 dpid, message
    else
      # noop.
    end
  end
#+END_SRC

**** 自分宛のパケットかを判定する
イーサネットにはルータ以外のホストが他にもつながっている可能性があるの
で、Packet Inメッセージが上がってきたときには、まずそのパケットが自分
宛かどうかを判断します (=to_me?= メソッド)。もし自分宛でない場合にはパ
ケットを破棄します。

#+BEGIN_SRC ruby
  def to_me?(message)
    return true if message.macda.broadcast?

    interface = @interfaces.find_by_port(message.in_port)
    return true if interface && interface.has?(message.macda)
  end
#+END_SRC

この =to_me?= メソッドは次のように動作します。まず、パケットの宛先MAC
アドレス (=macda=) がブロードキャストである場合には自分宛と判断します。
また、宛先MACアドレスが受信ポート (=message.in_port=) に割り当てられて
いるMACアドレスと同じである場合にも、自身宛と判断します。

**** パケットの種類によって処理を切り替え
自分宛のパケットだとわかった場合、次にパケットの種類を判別します。シン
プルルータが処理するパケットは、ARPのリクエストとリプライ、およびIPv4
のパケットの3種類です。PacketInクラスに用意されている次のメソッドを使っ
て、パケットの種類によって処理を切り替えます。

- =arp_request?=: 受信パケットがARPリクエストの場合、trueを返す
- =arp_reply?=: 受信パケットがARPリプライの場合、trueを返す
- =ipv4?=: 受信パケットがIPv4パケットの場合、trueを返す

**** ARPリクエストのハンドル
受信パケットがARPリクエストである場合、次の =handle_arp_request= メソッ
ドが呼ばれます。ここでは、ARPリプライメッセージを作ってPacket OutでARP
リクエストが届いたポートに出力します。

#+BEGIN_SRC ruby
  def handle_arp_request(dpid, message)
    port = message.in_port
    daddr = message.arp_tpa
    interface = @interfaces.find_by_port_and_ipaddr(port, daddr)
    return unless interface
    arp_reply = create_arp_reply_from(message, interface.hwaddr)
    packet_out dpid, arp_reply, SendOutPort.new(interface.port)
  end
#+END_SRC

なお、このハンドラ中で使っている =message.arp_tpa= は =PacketIn= クラ
スで定義されたメソッドで、ARPパケット中の宛先IPアドレスを返します。

**** ARPリプライのハンドル
受信パケットがARPリプライである場合、ARPテーブル (=@arp_table=) にMAC
アドレスを格納します。

#+BEGIN_SRC ruby
  def handle_arp_reply(message)
    @arp_table.update message.in_port, message.arp_spa, message.arp_sha
  end
#+END_SRC

なお、ここでも同様に =PacketIn= クラスに定義された以下のメソッドを使っ
てARPパケットから2つの情報を取り出しています。

- =arp_spa=: ARPパケット中の送信元IPアドレスを返す
- =arp_sha=: ARPパケット中の送信元MACアドレスを返す

**** IPv4パケットのハンドル
受信パケットがIPv4であった場合、 =handle_ipv4= メソッドが呼ばれます。
ルータに届くIPv4パケットには、次の3種類があり、それぞれによって処理を
切り替えます。

1. パケットの転送が必要な場合
2. 宛先のIPアドレスが自分宛だった場合
3. それ以外だった場合（この場合はパケットを破棄する）

#+BEGIN_SRC ruby
  def handle_ipv4(dpid, message)
    if should_forward?(message)
      forward dpid, message
    elsif message.icmpv4_echo_request?
      handle_icmpv4_echo_request dpid, message
    else
      # noop.
    end
  end
#+END_SRC

パケットを転送するかどうかを判定するのが次の =should_forward?= メソッ
ドです。パケットを転送する場合とはつまり、パケットの宛先IPv4アドレスが、
ルータのインタフェースに割り当てられているIPv4アドレスと異なる場合です。

#+BEGIN_SRC ruby
  def should_forward?(message)
    !@interfaces.find_by_ipaddr(message.ipv4_daddr)
  end
#+END_SRC

パケットの宛先IPアドレスがルータである場合、ルータ自身が応答する必要が
あります。今回実装したシンプルルータでは、ICMP Echoリクエスト（ping）
に応答する機能だけ実装しています。ICMP Echoリクエスト受信時に呼ばれる
=handle_icmpv4_echo_request= メソッドは、次のような処理を行ないます。

まず送信元IPアドレス (=message.ipv4_saddr=) に対応するMACアドレスをARP
テーブルから調べます。MACアドレスがキャッシュされている場合には、
=create_icmpv4_reply= メソッドで応答メッセージを作り、Packet Outで出力
します。MACアドレスがキャッシュされていないときには、
=handle_unresolved_packet= メソッド中で、ARPリクエストによるMACアドレ
スの問い合わせを行います。

#+BEGIN_SRC ruby
  def handle_icmpv4_echo_request(dpid, message)
    interface = @interfaces.find_by_port(message.in_port)
    saddr = message.ipv4_saddr.value
    arp_entry = @arp_table.lookup(saddr)
    if arp_entry
      icmpv4_reply = create_icmpv4_reply(arp_entry, interface, message)
      packet_out dpid, icmpv4_reply, SendOutPort.new(interface.port)
    else
      handle_unresolved_packet dpid, message, interface, saddr
    end
  end
#+END_SRC

*** パケットを書き換えて転送する
いよいよルータの動作の核心、パケットを書き換えて転送する部分です。

#+BEGIN_SRC ruby
  def forward(dpid, message)
    next_hop = resolve_next_hop(message.ipv4_daddr)

    interface = @interfaces.find_by_prefix(next_hop)
    return if !interface || interface.port == message.in_port

    arp_entry = @arp_table.lookup(next_hop)
    if arp_entry
      macsa = interface.hwaddr
      macda = arp_entry.hwaddr
      action = create_action_from(macsa, macda, interface.port)
      flow_mod dpid, message, action
      packet_out dpid, message.data, action
    else
      handle_unresolved_packet dpid, message, interface, next_hop
    end
  end
#+END_SRC

この =forward= メソッドは、次の5つの処理を行ないます。

1. ルーティングテーブルを参照し、次の転送先を決める
2. 次の転送先に送るための、出力インタフェースを決める
3. インタフェースが見つかった場合、ARPテーブルから宛先MACアドレスを探す
4. MACアドレスが見つかった場合、転送用のフローエントリを書き込み、受信
   パケットをPacket Outする
5. MACアドレスが見つからなかった場合、MACアドレスを問い合わせるための
   ARPリクエストを作り、Packet Outする

このうち重要なのは1.と4.の処理です。1.で次の転送先を決める処理は、
=resolve_next_hop= メソッドにて行います。このメソッドの詳細については、
次章で見ていきます。ここでは4.の処理を詳しく見ていきましょう。

**** パケットの書き換えと転送（Flow ModとPacket Out)
ARPテーブルから宛先のMACアドレスがわかると、パケットを書き換えて宛先へ
出力するとともに、同様のパケットをスイッチ側で転送するためのフローエン
トリを書き込みます。図10-1で説明したように、ルータによるパケットの転送
ではMACアドレスを書き換えます。 =create_action_from= メソッドはこのた
めのメソッドで、送信元MACアドレスの書き換え、宛先MACアドレスの書き換え、
該当するポートからの出力という3つのアクションを含む次の配列を作ります。
このアクションリストはFlow ModとPacket Outメッセージの送信に使われます。

#+BEGIN_SRC ruby
  def create_action_from(macsa, macda, port)
    [
      SetEthSrcAddr.new(macsa),
      SetEthDstAddr.new(macda),
      SendOutPort.new(port)
    ]
  end
#+END_SRC

** まとめ
OpenFlowプログラミングの総決算として、シンプルなルータを実装しました。

- ルータはイーサネットよりも一段上のIPレベルでパケットを転送する。異な
  るイーサネット間でパケットを中継するために、ルータはパケットのMACア
  ドレスを書き換える
- 宛先ホストのMACアドレスを調べるために、ルータはARPリクエストを送り結
  果をARPテーブルにキャッシュする。また、ルータ経由でパケットを送るホ
  ストのために、ルータはARPリクエストに応える必要がある
- いくつものルータを経由してパケットを転送するために、ルータはルーティ
  ングテーブルを使って次の転送先を決める
- Packet Inしたパケットの判別やARP、そしてICMP等の処理を行うためのヘル
  パメソッドを、Tremaはたくさん提供している

残念ながらシンプルルータは、ループ防止のためのTTL減算ができません。
Tremaが対応するOpenFlowバージョン1.0には、そのためのアクションがないた
めです。TTL減算はOpenFlowバージョン1.3からサポートされます。

続く第11章では、ルータの動作にとって欠かせないルーティングテーブルにつ
いて詳しく見たあと、いよいよこのルータを実行してみます。
