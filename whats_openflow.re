= OpenFlow って何？

//quote{
無精 (Laziness): エネルギーの総支出を減らすために、多大な努力をするよう
に、あなたをかりたてる性質。こうして労力を省くために書いたプログラムは
他人も使うようになり、そのプログラムに関する質問にいちいち答えずに済ま
すためにドキュメントを書くようになる。それゆえ、プログラマにとって最も
重要な素質である。またそれゆえ、この本が存在するのである。(「プログラミ
ング Perl、Larry Wallら、オーム社」)
//}

優れたプログラマが持つハッカー気質のひとつに「無精」があります。大好き
なコンピュータの前から一時も離れずにどうやってジャンクフードを手に入れ
るか……普通の人からするとただの横着に見えるかもしれませんが、ハッカー達
にとってそれはいつでも大きな問題でした。たとえば、ハッカーの巣窟として
有名な MIT の AI ラボにはかつて、UNIX のコマンド一発でピザを FAX 注文す
る @<tt>{xpizza} コマンドが存在しました@<fn>{xpizza}。また、RFC 2325 と
して公開されているコーヒーポットプロトコルでは、遠隔地にあるコーヒーポッ
トのコーヒーの量を監視したり、コーヒーを自動的に淹れたりするための半分
冗談のインタフェースを定義しています。

//footnote[xpizza][@<tt>{http://stuff.mit.edu/afs/sipb/project/lnf/other/CONTRIB/ai-info}]

こうした「ソフトウェアで楽をする」ハックのうち、もっとも大規模な例が最
新鋭の巨大データセンターです。クラウドサービスの裏で動く巨大データセン
ターは極めて少人数の管理者によって運用されており、大部分の管理はソフト
ウェアによって極限まで自動化されているという記事を読んだことがある人も
多いでしょう。このようにピザやコーヒーのようなお遊びから、巨大データセ
ンターのように一筋縄ではいかない相手まで、プログラムで「モノ」を思いど
おりにコントロールするのはもっとも楽しいハックの一種です。

== OpenFlow の登場

その中でもネットワークをハックする技術の 1 つが、本書で取り上げる
OpenFlow です。OpenFlow はネットワークスイッチの内部動作を変更するプロ
トコルを定義しており、スイッチを制御するソフトウェアによってネットワー
ク全体をプログラム制御できる世界、つまり Software Defined Network
(SDN) を目指しています。

OpenFlow の登場によって、今までは専門のオペレータ達が手作業で管理してい
たネットワークも、ついにプログラマ達に開放されました。ネットワークをソ
フトウェアとして記述することにより、次のようなことが可能になります:

 * アプリケーションに合わせて勝手に最適化するネットワーク。
 * ビジネスポリシーや時間帯などによって自動変更するネットワーク。
 * 障害が起こっても自己修復するネットワーク。

つまり、究極の自動化も夢ではなくなります!

本書はこの OpenFlow の説明から始まり、OpenFlow でネットワークを「ハック」
するための仕組みや設計思想を解説します。「OpenFlow ってどんなもので、具
体的に何に使えるんだろう？」そんな疑問に答えるために、第 I, III 部では
OpenFlow のメリットや活用例について、自宅や職場のような中小規模ネットワー
クから、データセンターのような超大規模ネットワークまでを例にとり、なる
べく具体例を見ながら理解を深めていただきます。また「さっそく OpenFlow
で素敵なアプリを作ってみたい!」というプログラマ向けに、第 II 部では実際
に動かせる実用的なコードを通じて OpenFlow プログラミングを習得していた
だきます。もちろん、OpenFlow やネットワークの基礎、プログラミング言語の
基本から説明しますので、ネットワークの専門家はもちろん、普通の SE や技
術営業、管理職、プログラマなどなど OpenFlow に興味を持つ方であればすん
なり理解できるように構成してあります。ではさっそく、OpenFlow の動作モデ
ルを理解しましょう。

== 電話サポートサービスと OpenFlow の動作モデル

OpenFlow の動作を現実世界にたとえると、電話サポートサービスに似ています。
電化製品などの調子が悪くなったときに、フリーダイヤルに相談するあれです。
実は電話サポートサービスの中身がわかれば OpenFlow の 95% を理解したも同
然です。それではさっそく具体的なストーリーで見ていきましょう。

今年もエアコンの活躍する季節がやってきました。友太郎くんは、エアコンの
リモコンの調子が悪くなったので電話サポートに問い合わせました。「はい、
こちらヨーヨーダインエアコン・サービスセンターです。担当はわたくし葵が
うけたまわります」葵さんは、お客さんからの質問を聞き対処方法を答えるオ
ペレータさんです。

=== ホストと OpenFlow スイッチのやりとり

「リモコンの液晶が点滅するようになっちゃったんですけど、どうしたらいいで
すか？」これは手元の対応マニュアルに対処方法が載っているので、葵さんは
すぐに回答できます (@<img>{yoyodyne_support})。「でしたら、リモコンの裏
面にあるリセットボタンを 5 秒ほど押していただけますか」。対応が終わると、
葵さんは対応マニュアルの「リモコンの液晶が点滅」の項目に、「問い合わせ
の総数 = 15 件」と書き込みました。どんな症状の問い合わせが多いかを記録
しておいて、上司の宮坂主任に報告するためです。

//image[yoyodyne_support][オペレータは対応マニュアルに対処法が見つかった場合すぐ回答できる][scale=0.3]

OpenFlow ネットワークでは、パケットを発生するホストがお客さんの友太郎君、
スイッチが電話オペレータの葵さんに対応します。また、スイッチはフローテー
ブルと呼ばれるデータベースを内蔵していて、これが葵さんの対応マニュアル
に対応します (@<img>{openflow_host_switch})。

//image[openflow_host_switch][スイッチはフローテーブルにパケットのエントリが見つかった場合すぐにパケットを処理できる][scale=0.3]

スイッチはホストからパケットを受信すると、そのパケットをどう処理すれば
よいか、手元のフローテーブルを参照します。フローテーブルには "マッチン
グルール" と呼ばれるパケットを特定する情報と、このマッチングルールにあ
てはまるパケットが届いたときにどうするかという "アクション" と呼ばれる
情報が入っています。たとえば「液晶が点滅したら (マッチングルール)、リセッ
トボタンを 5 秒押す (アクション)」と言った具合です。アクションには、パ
ケットを転送する、書き換える、破棄する、スイッチの転送キューに入れる、
またはそれらの組み合わせ (書き換えてから転送など) が指定できます。そし
て、マッチしたパケットの個数は "統計情報" として記録されます。先ほどの
例で言うと「液晶点滅の件は 15 件問い合わせがあった (統計情報)」という具
合です。

===[column] 取間先生曰く: マッチングルールの別名

フローの 3 要素のひとつ、マッチングルールには実は "OpenFlow 12 タプル"、
"ヘッダフィールド" という別の呼び方もあって、みんな混乱しとるんじゃ。そ
こでこの本では" マッチングルール" で統一することにした。パケットが来た
ときにルールに従ってマッチする、という役割をすなおに表現していて、いち
ばんわかりやすい名前だからじゃ。

"OpenFlow 12 タプル" は OpenFlow 1.1 では 15 タプルになるし、この先どこ
まで増えるかわからん。つまりいつまで使えるかわからん名前じゃ。また "ヘッ
ダフィールド" じゃ、何をするものか名前からはわかりづらいし、変に難しそ
うじゃろ。

===[/column]

そしてこの "マッチングルール"、"アクション"、"統計情報" の 3 つをまとめ
て "フロー" と呼びます。OpenFlow スイッチはこのフローに基づいて通信ト
ラフィックを制御します。

=== ホストと OpenFlow スイッチ、コントローラのやりとり

対処方法が対応マニュアルに載っていない場合はどうでしょう
(@<img>{yoyodyne_support_miyasaka})。「リモコンの "暖房" と "冷房" が同
時に表示されてて動かないんです」友太郎君が報告した症状は対応マニュアル
には無いようです。「少々お待ちください。少々お時間をいただきますが、こ
ちらで担当の者に問い合わせいたします」。葵さんは上司の宮坂主任にどうす
ればいいか聞きます。宮坂主任は少し考えると葵さんに指示を出ました。対処
方法がわかった葵さんは友太郎君に回答します。「お待たせいたしました。い
ちど電池をはずして、入れ直していただけますか」。ちょっと時間がかかって
しまいましたが、これでようやく一件落着です。きちょうめんな葵さんは、次
からの同じ問い合わせにすばやく答えられるようにするため、宮坂主任から教
わった対処方法を手元のマニュアルに追加しておきました。

//image[yoyodyne_support_miyasaka][対応マニュアルに対処法が見つからなかった場合、上司に聞いてから回答][scale=0.3]

OpenFlow ネットワークでは上司の宮坂主任にあたるコントローラがスイッチに
指示を出します (@<img>{openflow_host_switch_controller})。コントローラ
は問い合わせを受け取ると、どういうパケットに (マッチングルール) どうす
べきか (アクション) を決め、スイッチに指示します。スイッチは命令の内容
をマニュアルであるフローテーブルに書き込み、次のパケットの到着に備えま
す。

//image[openflow_host_switch_controller][フローテーブルにパケットのエントリが見つからなかった場合、コントローラが指示する][scale=0.3]

このように、対処方法がフローテーブルに載っていないパケットが届くと、コ
ントローラへの問い合わせが発生するので、パケットの処理がとても遅くなり
ます。しかし、マニュアルであるフローテーブルに「どうすべきか」をいった
ん書き込んでおけば、スイッチ側だけで素早く処理できます。

===[column] 友太郎の質問: コントローラへの問い合わせってどのくらい遅くなるの？

Q. コントローラの問い合わせって実際どのくらい遅くなるの？フローテーブル
   を使わずに、毎回コントローラが指示を出すほうがずっと簡単じゃない？

A. あとで書く。

===[/column]

=== フローの有効期限

マニュアルにはこんな項目もあります。"部品の最低保有期間が 2014 年 6 月
9 日までなので、それ以降の対応方法は問い合わせのこと" このように項目に
よっては有効期限が入っており、これを過ぎたものはマニュアルから消したほ
うがいいでしょう。

== OpenFlow プロトコル

===[column] 取間先生曰く…: Packet In はページフォールト

あとで書く

===[/column]

== OpenFlow の使い途
=== ネットワークを柔軟に管理する
=== IaaS を提供する
=== データセンタを作る
=== SDN の「部品」としての OpenFlow
== 他の SDN 方式との比較
== まとめ
== 参考文献

