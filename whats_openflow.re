= OpenFlow って何？

//quote{
無精 (Laziness): エネルギーの総支出を減らすために、多大な努力をするよう
に、あなたをかりたてる性質。こうして労力を省くために書いたプログラムは
他人も使うようになり、そのプログラムに関する質問にいちいち答えずに済ま
すためにドキュメントを書くようになる。それゆえ、プログラマにとって最も
重要な素質である。またそれゆえ、この本が存在するのである。(「プログラミ
ング Perl、Larry Wallら、オーム社」)
//}

優れたプログラマが持つハッカー気質のひとつに「無精」があります。大好き
なコンピュータの前から一時も離れずにどうやってジャンクフードを手に入れ
るか……普通の人からするとただの横着に見えるかもしれませんが、ハッカー達
にとってそれはいつでも大きな問題でした。たとえば、ハッカーの巣窟として
有名な MIT の AI ラボにはかつて、UNIX のコマンド一発でピザを FAX 注文す
る @<tt>{xpizza} コマンドが存在しました@<fn>{xpizza}。また、RFC 2325 と
して公開されているコーヒーポットプロトコルでは、遠隔地にあるコーヒーポッ
トのコーヒーの量を監視したり、コーヒーを自動的に淹れたりするための半分
冗談のインタフェースを定義しています。

//footnote[xpizza][@<tt>{http://stuff.mit.edu/afs/sipb/project/lnf/other/CONTRIB/ai-info}]

こうした「ソフトウェアで楽をする」ハックのうち、もっとも大規模な例が最
新鋭の巨大データセンターです。クラウドサービスの裏で動く巨大データセン
ターは極めて少人数の管理者によって運用されており、大部分の管理はソフト
ウェアによって極限まで自動化されているという記事を読んだことがある人も
多いでしょう。このようにピザやコーヒーのようなお遊びから、巨大データセ
ンターのように一筋縄ではいかない相手まで、プログラムで「モノ」を思いど
おりにコントロールするのはもっとも楽しいハックの一種です。

== OpenFlow の登場

その中でもネットワークをハックする技術の 1 つが、本書で取り上げる
OpenFlow です。OpenFlow はネットワークスイッチの内部動作を変更するプロ
トコルを定義しており、スイッチを制御するソフトウェアによってネットワー
ク全体をプログラム制御できる世界、つまり Software Defined Network
(SDN) を目指しています。

OpenFlow の登場によって、今までは専門のオペレータ達が手作業で管理してい
たネットワークも、ついにプログラマ達に開放されました。ネットワークをソ
フトウェアとして記述することにより、次のようなことが可能になります:

 * アプリケーションに合わせて勝手に最適化するネットワーク。
 * ビジネスポリシーや時間帯などによって自動変更するネットワーク。
 * 障害が起こっても自己修復するネットワーク。

つまり、究極の自動化も夢ではなくなります!

本書はこの OpenFlow の説明から始まり、OpenFlow でネットワークを「ハック」
するための仕組みや設計思想を解説します。「OpenFlow ってどんなもので、具
体的に何に使えるんだろう？」そんな疑問に答えるために、第 I, III 部では
OpenFlow のメリットや活用例について、自宅や職場のような中小規模ネットワー
クから、データセンターのような超大規模ネットワークまでを例にとり、なる
べく具体例を見ながら理解を深めていただきます。また「さっそく OpenFlow
で素敵なアプリを作ってみたい!」というプログラマ向けに、第 II 部では実際
に動かせる実用的なコードを通じて OpenFlow プログラミングを習得していた
だきます。もちろん、OpenFlow やネットワークの基礎、プログラミング言語の
基本から説明しますので、ネットワークの専門家はもちろん、普通の SE や技
術営業、管理職、プログラマなどなど OpenFlow に興味を持つ方であればすん
なり理解できるように構成してあります。ではさっそく、OpenFlow の動作モデ
ルを理解しましょう。

== 電話サポートサービスと OpenFlow の動作モデル

ここから 5, 6 分ほど例え話をします。みなさんもきっとお世話になったことがあると思いますが、よくあるカスタマーサポートを思い浮かべてください。そう、テレビとかパソコンの調子が悪くなったときに、フリーダイヤルで相談するアレです。「なんだ、OpenFlow とまったく関係ないじゃないか」。実は OpenFlow の基本的な仕組みはカスタマーサポートととても良く似ているのです。これから始めるストーリーの内容が理解できれば、OpenFlow の 95% を理解したも同然です。

それではさっそくこのストーリーの登場人物、お客さんの友太郎君とカスタマーサポートセンターで働く電話オペレータ、葵さんの二人に登場してもらいましょう。

=== エアコンのリモコンが壊れた

今年もエアコンの活躍する季節がやってきました。ところが友太郎君のエアコンはどうも調子が良くありません。そこで、取扱説明書に載っていたカスタマーサポートに問い合わせました。自動音声に従ってあれこれと試してみましたが、どうもうまくいきません。結局、電話オペレータに電話がつながりました。

「はい、こちらヨーヨーダインエアコン・カスタマーサポートセンターです。担当はわたくし葵がうけたまわります。お客様のご要件は何でしょうか？」。葵さんはヨーヨーダイン・エアコンで働く電話オペレータです。お客さんから不具合の症状を聞き出し、問題を解決できる適切な技術者に電話をつないでくれます。

友太郎君は不具合の様子を電話で伝えます。「なんだかエアコンのリモコンの調子が悪いんです。リモコンの温度表示が点滅してるんですけど、どうしたら直りますか?」

葵さんは手元の対応マニュアルを調べます。対応マニュアルには故障時の症状と、対処法をアドバイスできる技術者の内線番号が書かれています。続く数字はそれぞれの項目の問合せ件数です。

 1. @<em>{温度表示が点滅する → 555-2222-2222 (8 件)}
 2. 表示全体が点滅する → 555-1111-1111 (14 件)
 3. 風向きが変更できない → 555-3333-3333 (4 件)

どうやらこれはよく知られた問題のようです。マニュアルの先頭 1 番目に担当技術者の内線番号がみつかりました。こちらに電話を転送すればよいようです。

「ご不便をおかけしました。対応できる技術者がみつかりましたので、ただいまお繋ぎいたします」。電話を転送してもらった友太郎君は技術者と話をし、無事に問題を解決できました。

葵さんは電話の転送が済むと、項目 1 番の「問い合わせ数」を 8 件から 9 件にアップデートしました。

 1. 温度表示が点滅する → 555-2222-2222 (@<em>{9 件})
 2. 表示全体が点滅する → 555-1111-1111 (14 件)
 3. 風向きが変更できない → 555-3333-3333 (4 件)

こうすることで、どんな症状の問合せが多いかを開発部署にフィードバックできます。開発部署はこの情報を、たとえば次の製品開発などに生かせるというわけです。

ところで対応マニュアルをよく見ると、よく似た症状が 2 つあるようです。1 番の「温度表示がに点滅する」と、2 番の「表示全体が点滅する」がそれです。

オペレータの業務ルールとして、「症状は 1 番から順にチェックする」というのがあります。お客さんの中には「なんか表示がチカチカしている」といったようにあいまいな事を言う人が少なくありません。そこでどうおかしいのかをハッキリさせるために、「チカチカしているのは温度表示の部分だけですか？」という質問をします。もしそうであれば 1 番の番号に転送です。そうでなかった場合は 2 番です。一番上から順にチェックするという単純なルールによって、正しく転送するようにしているのです。

=== またリモコンが不調

しばらくは友太郎君のエアコンも順調でしたが、一ヶ月後また調子悪くなってしまいました。友太郎君はふたたびカスタマーサポートへダイヤルします。「リモコンの "暖房" と "冷房" がなぜか同時に表示されてるんです」。

葵さんはいつものように手元の対応マニュアルを調べましたが、困ったことにこの症状は載っていません。どうやらまったく新しい不具合のようです。でも、葵さんは慌てずに友太郎君に次のように伝えます「すみませんが少々お待ちください。多少お時間をいただきますが対応可能な技術者を探します」。そして録音された "しばらくお待ちください" のメッセージと音楽が流れはじめました。

こういう時、葵さんがいつも頼るのは上司の宮坂主任です。「宮坂さん、こんな症状のお問い合わせがあったんですが誰につなげばいいかわかりますか?」宮坂主任はエアコンの事なら何でも知っています。症状を聞くやいなや、適切な技術者の内線番号を葵さんに渡します。

転送先が分かった葵さんは友太郎君の待つ電話に戻ります。「大変お待たせいたしました。担当の者にお電話を転送いたします」。一度目の問い合わせと比べてかなり時間がかかってしまいましたが、これでようやく一件落着です。

葵さんは、宮坂主任から教わった担当者の内線番号をマニュアルに追加しておきます。次からの同じ問い合わせにすばやく答えられるようにするためです。

 1. 温度表示が点滅する → 555-2222-2222 (9 件)
 2. 表示全体が点滅する → 555-1111-1111 (14 件)
 3. 風向きが変更できない → 555-3333-3333 (4 件)
 4. @<em>{"冷房" と "暖房" が同時に表示される → 5555-4444-4444 (1 件)}

=== 古いエアコンの問い合わせ

ある日、別のお客さんからこんな問い合わせがありました。「20 年前に買ったエアコンを使っているんですが、電源ランプが点かなくなってしまったんです」

葵さんが対応マニュアルを見ると、下のほうに該当する項目がありました。ただし「有効期限 2008/1」という注意書きがあります。とても古いエアコンなので、すでに部品の最低保有期間が切れていて交換用ランプが無いようです。

 1. 温度表示が点滅する → 555-2222-2222 (9 件)
 2. 表示全体が点滅する → 555-1111-1111 (14 件)
 3. 風向きが変更できない → 555-3333-3333 (4 件)
 4. "冷房" と "暖房" が同時に表示される → 555-4444-4444 (1 件)
 5. @<em>{電源ランプが点かない →  555-5555-5555 (25 件、有効期限 2008/1)}

このようにマニュアルの項目によっては有効期限が決まっており、期限を過ぎたものは対処できません。こういう古い項目はマニュアルから消しておいたほうがいいでしょう。

 1. 温度表示が点滅する → 555-2222-2222 (9 件)
 2. 表示全体が点滅する → 555-1111-1111 (14 件)
 3. 風向きが変更できない → 555-3333-3333 (4 件)
 4. "冷房" と "暖房" が同時に表示される → 555-4444-4444 (1 件)

もちろん、消した項目は上司に報告することになっています。こういう情報はいつ役に立つかわかりません。

=== このストーリーのポイント

細かい部分は筆者の想像ですが、カスタマーサポートの仕事とはおそらくこういう感じだと思います。本題の OpenFlow の解説に進む前に、この話の大事なポイントを挙げておきましょう。

==== マニュアル化されている

電話サポート業務はすべてマニュアル化されています。マニュアル化の利点は 2 つあります。第一に、オペレータを大量に集めやすいということがあります。オペレータになるための最低限の知識はマニュアルの読み方と電話対応マナーであり、集めた人材を短期間の研修でオペレータに育てることができます。第二に、人件費を安くできます。もし専門知識を持つ技術者をオペレータとして雇ってしまうと、どうしても給料が高くなってしまうからです。

==== 階層的な組織である

大勢のオペレータは少数の上司によって監督されています。オペレータが参照する対応マニュアルは上司が一括して作成し、オペレータ全員に配ります。このため、オペレータが増えても均一な対応をしてもらうことができます。また、担当者がみつからなかった場合などの非常時にだけ上司に問い合わせが来るようにすることで、オペレータが増えてもうまくスケールすることができます。このように組織をうまく階層化することで大勢のオペレータを集中管理しているのです。
  


=== ホストと OpenFlow スイッチのやりとり

「リモコンの液晶が点滅するようになっちゃったんですけど、どうしたらいいで
すか？」これは手元の対応マニュアルに対処方法が載っているので、葵さんは
すぐに回答できます (@<img>{yoyodyne_support})。「でしたら、リモコンの裏
面にあるリセットボタンを 5 秒ほど押していただけますか」。対応が終わると、
葵さんは対応マニュアルの「リモコンの液晶が点滅」の項目に、「問い合わせ
の総数 = 15 件」と書き込みました。どんな症状の問い合わせが多いかを記録
しておいて、上司の宮坂主任に報告するためです。

//image[yoyodyne_support][オペレータは対応マニュアルに対処法が見つかった場合すぐ回答できる][scale=0.3]

OpenFlow ネットワークでは、パケットを発生するホストがお客さんの友太郎君、
スイッチが電話オペレータの葵さんに対応します。また、スイッチはフローテー
ブルと呼ばれるデータベースを内蔵していて、これが葵さんの対応マニュアル
に対応します (@<img>{openflow_host_switch})。

//image[openflow_host_switch][スイッチはフローテーブルにパケットのエントリが見つかった場合すぐにパケットを処理できる][scale=0.3]

スイッチはホストからパケットを受信すると、そのパケットをどう処理すれば
よいか、手元のフローテーブルを参照します。フローテーブルには "マッチン
グルール" と呼ばれるパケットを特定する情報と、このマッチングルールにあ
てはまるパケットが届いたときにどうするかという "アクション" と呼ばれる
情報が入っています。たとえば「液晶が点滅したら (マッチングルール)、リセッ
トボタンを 5 秒押す (アクション)」と言った具合です。アクションには、パ
ケットを転送する、書き換える、破棄する、スイッチの転送キューに入れる、
またはそれらの組み合わせ (書き換えてから転送など) が指定できます。そし
て、マッチしたパケットの個数は "統計情報" として記録されます。先ほどの
例で言うと「液晶点滅の件は 15 件問い合わせがあった (統計情報)」という具
合です。

===[column] 取間先生曰く: マッチングルールの別名

フローの 3 要素のひとつ、マッチングルールには実は "OpenFlow 12 タプル"、
"ヘッダフィールド" という別の呼び方もあって、みんな混乱しとるんじゃ。そ
こでこの本では" マッチングルール" で統一することにした。パケットが来た
ときにルールに従ってマッチする、という役割をすなおに表現していて、いち
ばんわかりやすい名前だからじゃ。

"OpenFlow 12 タプル" は OpenFlow 1.1 では 15 タプルになるし、この先どこ
まで増えるかわからん。つまりいつまで使えるかわからん名前じゃ。また "ヘッ
ダフィールド" じゃ、何をするものか名前からはわかりづらいし、変に難しそ
うじゃろ。

===[/column]

そしてこの "マッチングルール"、"アクション"、"統計情報" の 3 つをまとめ
て "フロー" と呼びます。OpenFlow スイッチはこのフローに基づいて通信ト
ラフィックを制御します。

=== ホストと OpenFlow スイッチ、コントローラのやりとり

対処方法が対応マニュアルに載っていない場合はどうでしょう
(@<img>{yoyodyne_support_miyasaka})。「リモコンの "暖房" と "冷房" が同
時に表示されてて動かないんです」友太郎君が報告した症状は対応マニュアル
には無いようです。「少々お待ちください。少々お時間をいただきますが、こ
ちらで担当の者に問い合わせいたします」。葵さんは上司の宮坂主任にどうす
ればいいか聞きます。宮坂主任は少し考えると葵さんに指示を出ました。対処
方法がわかった葵さんは友太郎君に回答します。「お待たせいたしました。い
ちど電池をはずして、入れ直していただけますか」。ちょっと時間がかかって
しまいましたが、これでようやく一件落着です。きちょうめんな葵さんは、次
からの同じ問い合わせにすばやく答えられるようにするため、宮坂主任から教
わった対処方法を手元のマニュアルに追加しておきました。

//image[yoyodyne_support_miyasaka][対応マニュアルに対処法が見つからなかった場合、上司に聞いてから回答][scale=0.3]

OpenFlow ネットワークでは上司の宮坂主任にあたるコントローラがスイッチに
指示を出します (@<img>{openflow_host_switch_controller})。コントローラ
は問い合わせを受け取ると、どういうパケットに (マッチングルール) どうす
べきか (アクション) を決め、スイッチに指示します。スイッチは命令の内容
をマニュアルであるフローテーブルに書き込み、次のパケットの到着に備えま
す。

//image[openflow_host_switch_controller][フローテーブルにパケットのエントリが見つからなかった場合、コントローラが指示する][scale=0.3]

このように、対処方法がフローテーブルに載っていないパケットが届くと、コ
ントローラへの問い合わせが発生するので、パケットの処理がとても遅くなり
ます。しかし、マニュアルであるフローテーブルに「どうすべきか」をいった
ん書き込んでおけば、スイッチ側だけで素早く処理できます。

===[column] 友太郎の質問: コントローラへの問い合わせってどのくらい遅くなるの？

Q. コントローラの問い合わせって実際どのくらい遅くなるの？フローテーブル
   を使わずに、毎回コントローラが指示を出すほうがずっと簡単じゃない？

A. あとで書く。

===[/column]

=== フローの有効期限

マニュアルにはこんな項目もあります。"部品の最低保有期間が 2014 年 6 月
9 日までなので、それ以降の対応方法は問い合わせのこと" このように項目に
よっては有効期限が入っており、これを過ぎたものはマニュアルから消したほ
うがいいでしょう。

== OpenFlow プロトコル

===[column] 取間先生曰く…: Packet In はページフォールト

あとで書く

===[/column]

== OpenFlow の使い途
=== ネットワークを柔軟に管理する
=== IaaS を提供する
=== データセンタを作る
=== SDN の「部品」としての OpenFlow
== 他の SDN 方式との比較
== まとめ
== 参考文献

