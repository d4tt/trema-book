= OpenFlow って何？

//quote{
無精 (Laziness): エネルギーの総支出を減らすために、多大な努力をするよう
に、あなたをかりたてる性質。こうして労力を省くために書いたプログラムは
他人も使うようになり、そのプログラムに関する質問にいちいち答えずに済ま
すためにドキュメントを書くようになる。それゆえ、プログラマにとって最も
重要な素質である。またそれゆえ、この本が存在するのである。(「プログラミ
ング Perl、Larry Wallら、オーム社」)
//}

優れたプログラマが持つハッカー気質のひとつに「無精」があります。大好き
なコンピュータの前から一時も離れずにどうやってジャンクフードを手に入れ
るか……普通の人からするとただの横着に見えるかもしれませんが、ハッカー達
にとってそれはいつでも大きな問題でした。たとえば、ハッカーの巣窟として
有名な MIT の AI ラボにはかつて、UNIX のコマンド一発でピザを FAX 注文す
る @<tt>{xpizza} コマンドが存在しました@<fn>{xpizza}。また、RFC 2325 と
して公開されているコーヒーポットプロトコルでは、遠隔地にあるコーヒーポッ
トのコーヒーの量を監視したり、コーヒーを自動的に淹れたりするための半分
冗談のインタフェースを定義しています。

//footnote[xpizza][@<tt>{http://stuff.mit.edu/afs/sipb/project/lnf/other/CONTRIB/ai-info}]

こうした「ソフトウェアで楽をする」ハックのうち、もっとも大規模な例が最
新鋭の巨大データセンターです。クラウドサービスの裏で動く巨大データセン
ターは極めて少人数の管理者によって運用されており、大部分の管理はソフト
ウェアによって極限まで自動化されているという記事を読んだことがある人も
多いでしょう。このようにピザやコーヒーのようなお遊びから、巨大データセ
ンターのように一筋縄ではいかない相手まで、プログラムで「モノ」を思いど
おりにコントロールするのはもっとも楽しいハックの一種です。

== SDN: ネットワークをソフトウェアで自動制御

その中でもネットワークをハックする技術の 1 つが、本書で取り上げる
OpenFlow です。OpenFlow はネットワークスイッチの内部動作を変更するプロ
トコルを定義しており、スイッチを制御するソフトウェアによってネットワー
ク全体をプログラム制御できる世界、つまり Software Defined Network
(SDN) を目指しています。

OpenFlow の登場によって、今までは専門のオペレータ達が手作業で管理してい
たネットワークも、ついにプログラマ達に開放されました。ネットワークをソ
フトウェアとして記述することにより、次のようなことが可能になります:

 * アプリケーションに合わせて勝手に最適化するネットワーク。
 * ビジネスポリシーや時間帯などによって自動変更するネットワーク。
 * 障害が起こっても自己修復するネットワーク。

つまり、究極の自動化も夢ではなくなります!

本書はこの OpenFlow の説明から始まり、OpenFlow でネットワークを「ハック」
するための仕組みや設計思想を解説します。「OpenFlow ってどんなもので、具
体的に何に使えるんだろう？」そんな疑問に答えるために、第 I, III 部では
OpenFlow のメリットや活用例について、自宅や職場のような中小規模ネットワー
クから、データセンターのような超大規模ネットワークまでを例にとり、なる
べく具体例を見ながら理解を深めていただきます。また「さっそく OpenFlow
で素敵なアプリを作ってみたい!」というプログラマ向けに、第 II 部では実際
に動かせる実用的なコードを通じて OpenFlow プログラミングを習得していた
だきます。もちろん、OpenFlow やネットワークの基礎、プログラミング言語の
基本から説明しますので、ネットワークの専門家はもちろん、普通の SE や技
術営業、管理職、プログラマなどなど OpenFlow に興味を持つ方であればすん
なり理解できるように構成してあります。ではさっそく、OpenFlow の動作モデ
ルを理解しましょう。

== OpenFlow の仕組み

ここから 3 つほどちょっとした例え話をします。みなさんもきっとお世話になったことがあると思いますが、よくあるカスタマーサポートを思い浮かべてください。そう、テレビとかパソコンの調子が悪くなったときに、フリーダイヤルで相談するアレです。「それって、どこが OpenFlow と関係あるの？」。実は OpenFlow の基本的な仕組みはカスタマーサポートにとても良く似ているのです。

カスタマーサポートの仕組みが理解できれば、OpenFlow の 95% を理解できたも同然です。それではさっそくこのストーリーの主人公の友太郎君と、カスタマーサポートセンターで働く葵さんの二人に登場してもらいましょう。

=== ストーリー 1: エアコンが壊れた!?

今年もエアコンの活躍する季節がやってきました。ところが友太郎君のエアコンはどうも調子が良くありません。そこで、取扱説明書に載っていたカスタマーサポートに問い合わせました。自動音声に従ってあれこれと試してみましたが、どうもうまくいきません。結局、電話オペレータに電話がつながりました。

「はい、こちらヨーヨーダインエアコン・カスタマーサポートセンターです。担当はわたくし葵がうけたまわります。お客様のご要件は何でしょうか？」。葵さんはヨーヨーダイン・エアコン社で働く電話オペレータです。お客さんから不具合の症状を聞き出し、問題を解決できる適切なエンジニアに電話をつなぐのが仕事です。

//indepimage[yoyodyne_support][][scale=0.3]

友太郎君は不具合の様子を電話で伝えます。「なんだかエアコンの調子が悪いんです。リモコンの温度表示がずっと点滅してるんですけど、どうしたら直りますか?」

葵さんは手元の対応マニュアルを調べます (@<table>{manual1})。対応マニュアルには故障時の症状と、問題を解決できそうなエンジニアの内線番号が書かれています。続く数字はそれぞれの症状の問合せ件数です。

//table[manual1][対応マニュアル]{
番号	症状				内線番号	問合せ件数
------------------------------------------------------------------
1	温度表示が点滅する		555-2222	8 件
2	風速表示が点滅する		555-4444	6 件
3	表示がおかしい			555-1111	14 件
4	風向きが変更できない		555-3333	4 件
//}

マニュアルの 1 番目に同じ症状がみつかりました。どうやらこれはよく知られた問題のようです。「ご不便をおかけしました。担当のエンジニアにただいまお繋ぎいたします」。電話を転送してもらった友太郎君はエンジニアと話をし、無事に問題を解決できました。

友太郎君との電話を切ると、葵さんは 1 番の問い合わせ件数を 8 件から 9 件にアップデートしました (@<table>{manual2})。

//table[manual2][問い合わせ件数をアップデートする]{
番号	症状				内線番号	問合せ件数
------------------------------------------------------------------
1	温度表示が点滅する		555-2222	@<em>{9 件}
2	風速表示が点滅する		555-4444	6 件
3	表示がおかしい			555-1111	14 件
4	風向きが変更できない		555-3333	4 件
//}

//noindent
こうすることでどんな症状の問合せが多いかを開発部署にフィードバックできます。開発部署はたとえば次の製品開発などにこの情報を生かせるというわけです。

==== これを OpenFlow に置換えると...

OpenFlow の世界では、パケットを送信するホストがお客さんの友太郎君、パケットを転送する OpenFlow スイッチが電話オペレータの葵さんに対応します (@<img>{openflow_host_switch})。ホストがパケットを送ると、OpenFlow スイッチはパケットの中身に応じてパケットを適切な宛先に転送します。これはちょうど、葵さんが友太郎君からの問い合わせに応じて担当エンジニアに電話を転送するのと同じです。

//image[openflow_host_switch][OpenFlow ではホストがお客さん、スイッチが電話オペレータ、フローテーブルがマニュアルに対応][scale=0.3]

OpenFlow スイッチが普通のスイッチと違うのは、その動作が「マニュアル化」されている点です。カスタマーサポートの例では、葵さんはマニュアルを参照して電話転送先の番号を調べました。OpenFlow スイッチは、パケットの転送先をフローテーブルと呼ばれるデータベースを参照して決めます。葵さんの業務がすべてマニュアル化されているのと同じく、OpenFlow スイッチの制御はすべてこのフローテーブルの中身によって決まります。

==== 転送情報を管理するフローテーブル

フローテーブルには、「こういうパケットが届いたら、ポート x 番に転送する」というルールがいくつか記録されています。このルールをフローと呼びます。フローはちょうどマニュアルの「『温度表示が点滅する』という問い合わせが来たら、内線 555-2222 に転送する」といった各項目に対応します。

このフローの中身を少し詳しく見てみましょう。フローはマッチングルール、アクション、そして統計情報の 3 つの要素から構成されています (@<table>{story1_openflow})。

//table[story1_openflow][フローテーブルで管理されるフローの例]{
マッチングルール				アクション		統計情報
-------------------------------------------------------------------------------------------
送信ホストの IP アドレスが 192.168.1.100	ポート 8 番に転送	80 パケット
宛先ホストの IP アドレスが 192.168.10.92	ポート 10 番に転送	14 パケット
送信ホストの MAC アドレスが 00:50:56:c0:00:08	ポート 1 番に転送	24 パケット
//}

: マッチングルール
  マッチングルールは届いたパケットがあてはまるフローをフローテーブル内から探すときの条件です。たとえば「温度表示が点滅する」という症状から転送先を決めたように、「パケットを送信したホストの IP アドレスが 192.168.1.100 である」などといったマッチングルールからパケットの転送先を決めます。マッチングルールには OSI 参照モデルで言うレイヤ 1 からレイヤ 4 まで、12 種類の条件を書くことができます。

: アクション
  アクションは届いたパケットをどう処理するかという「動詞」にあたります。たとえば「内線 555-4444 に転送」と同じく、アクションには「スイッチのポート 8 番に転送」などと指定します。なお、アクションでは単純な転送だけでなくパケットを書き換えることもできます。パケットの中身のうち書き換えできる部分は、マッチングルールと同じくレイヤ 1 からレイヤ 4 まで 12 種類の各種フィールドです。

: 統計情報
  統計情報はフローごとのパケット処理量の記録です。たとえば「温度表示が点滅する件の問い合わせ数は 15 件」とマニュアルに記録したように、「このフローに従って転送したパケットは 80 個」などといった情報が書き込まれます。

ここまで見てきたように、カスタマーサポートの例と OpenFlow は驚くほどよく似ていることがわかると思います。実は OpenFlow はとても単純で理解しやすいものなのです。

=== ストーリー 2: またリモコンが不調!?

しばらくは友太郎君のエアコンも順調でしたが、一ヶ月後また調子悪くなってしまいました。友太郎君はふたたびカスタマーサポートへダイヤルします。「リモコンの "暖房" と "冷房" がなぜか同時に表示されてるんです」。

葵さんはいつものように手元の対応マニュアルを調べましたが、困ったことにこの症状は載っていません。どうやらまったく新しい不具合のようです。でも、葵さんは慌てずに友太郎君に次のように伝えます「すみませんが少々お待ちください。多少お時間をいただきますが対応可能なエンジニアを探します」。そして電話口には録音された "しばらくお待ちください" と音楽が流れはじめました。

//image[yoyodyne_support_miyasaka][対応マニュアルに対処法が見つからなかった場合、上司に聞いてから回答][scale=0.3]

こういう時、葵さんがいつも頼るのは上司の宮坂主任です (@<img>{yoyodyne_support_miyasaka})。「宮坂さん、こんな症状の問い合わせがあったんですが誰につなげばいいかわかりますか?」宮坂主任はエアコンの事なら何でも知っています。症状を聞くやいなや、適切なエンジニアの内線番号を葵さんに渡します。

転送先が分かった葵さんは友太郎君の待つ電話に戻ります。「大変お待たせいたしました。担当の者にお電話を転送いたします」。一度目の問い合わせと比べてかなり時間がかかってしまいましたが、これでようやく一件落着です。

葵さんは、宮坂主任から教わった担当者の内線番号をマニュアルに追加しておきます。次からの同じ問い合わせにすばやく答えられるようにするためです。

//table[manual3][マニュアルをアップデートする]{
番号	症状				内線番号	問合せ件数
------------------------------------------------------------------
1	温度表示が点滅する		555-2222	9 件
2	風速表示が点滅する		555-4444	6 件
3	冷房と暖房が同時に表示		555-5555	1 件
4	表示がおかしい			555-1111	14 件
5	風向きが変更できない		555-3333	4 件
//}

==== これを OpenFlow に置換えると...

葵さんはマニュアルに載っていない問い合わせを上司の宮坂主任に問い合わせました。OpenFlow でこの上司にあたるのがコントローラと呼ばれるソフトウェアです。

//image[openflow_host_switch_controller][フローテーブルにパケットのエントリが見つからなかった場合、コントローラに問い合わせる][scale=0.3]

通常運転時はパケットはすべてスイッチで高速に処理されますが、中には予期しないパケットなどスイッチ側でどう処理してよいかわからないパケットが届きます。このようなパケットがスイッチに届くと、スイッチはこのパケットをコントローラに上げて「どうしたらよいか」という指示をあおぎます。コントローラは問い合わせに応じてパケットの中身を調べ、どうすべきかという指示 (フロー) をフローテーブルに書き込んでやります。

このようにフローテーブルに載っていないパケットが届くと、コントローラへの問い合わせが発生するのでパケット転送がとても遅くなります。しかし、コントローラが十分に賢く必要なフローをあらかじめ書き込んでおくようにしておけば、スイッチ側だけで素早く処理できます。

===[column] 友太郎の質問: コントローラへの問い合わせってどのくらい遅くなるの？

Q. コントローラの問い合わせって実際どのくらい遅くなるの？フローテーブル
   を使わずに、毎回コントローラが指示を出すほうがずっと簡単じゃない？

A. あとで書く。

===[/column]

=== ストーリー 3: 古いエアコンが故障

ある日、別のお客さんからこんな問い合わせがありました。「20 年前に買ったエアコンを使っているんですが、電源ランプが点かなくなってしまったんです」

葵さんが対応マニュアルを見ると、下のほうに該当する項目がありました。ただし「有効期限 2008/1」という注意書きがあります。とても古いエアコンなので、すでに部品の最低保有期間が切れていて交換用ランプが無いようです。

//table[][対応マニュアル]{
番号	症状				内線番号	問合せ件数	有効期限
--------------------------------------------------------------------------------
1	温度表示が点滅する		555-2222	9 件
2	風速表示が点滅する		555-4444	6 件
3	冷房と暖房が同時に表示		555-5555	1 件
4	表示がおかしい			555-1111	14 件
5	風向きが変更できない		555-3333	4 件
6	電源ランプが点かない		555-5555-5555	25 件		2008/1
//}

このようにマニュアルの項目によっては有効期限が決まっており、期限を過ぎたものは対処できません。こういう古い項目はマニュアルから消しておいたほうがいいでしょう。

//table[][対応マニュアル]{
番号	症状				内線番号	問合せ件数	有効期限
--------------------------------------------------------------------------------
1	温度表示が点滅する		555-2222	9 件
2	風速表示が点滅する		555-4444	6 件
3	冷房と暖房が同時に表示		555-5555	1 件
4	表示がおかしい			555-1111	14 件
5	風向きが変更できない		555-3333	4 件
//}

もちろん、消した項目は上司に報告することになっています。こういう情報はいつ役に立つかわかりません。

==== これを OpenFlow に置換えると...

フローにも有効期限を指定することができます。有効期限が切れると、スイッチからコントローラに削除されたフローとその統計情報が送られます。

このようにフローに適切に有効期限を付けておくことによって、フローごとの統計情報をコントローラで集計することができます。たとえばあるホストから出るネットワークトラフィックなどといった情報を取得できます。

== OpenFlow のうれしさ

OpenFlow の仕組みの大枠は理解できたと思います。それでは最も肝心な部分、「OpenFlow って何がうれしいの？」を掘り下げてみましょう。実はこれもカスタマーサポートセンターとのアナロジーを使うとすんなりと理解できます。

=== スイッチが安くなる

カスタマーサポートセンターではとにかくたくさんの電話オペレータを雇うため、人件費をなるべく抑える工夫がされています。電話オペレータの業務をマニュアル化することで、特別な資格や実績が無い人材でも短期間の研修で電話オペレータとして育てることができます。このため、アルバイトやパート、派遣業務など幅広い範囲から比較的安く人材を集めることができます。

OpenFlow スイッチも従来のスイッチに比べると価格を低く抑えることができます。OpenFlow では制御の主役が個々のスイッチからコントローラに変わります。このため、スイッチに求められる機能はフローテーブルの内容に従ってパケットを転送するだけ、というシンプルなものになります。このためスイッチの実装がシンプルになり価格が安くなります。

=== スケーラブルである

カスタマーサポートセンターでは大勢の電話オペレータをなるべく少数の管理職で管理する必要があります。しかし、もし頻繁に管理職に問い合わせが来てしまうと、あっという間に電話回線がパンクしてしまいます。そこで、なるべくあらゆる問い合わせを想定したマニュアルを作ることで、管理職に上がる問い合わせを減らします。これによって、電話オペレータを増やしてもうまくスケールすることができます。

OpenFlow でもコントローラに負荷が集中しないようにネットワークを設計することが重要です。データセンターなどの閉じた環境では、トラフィックの特徴や流れるパケットの種類はあらかじめ見当が付いている場合が多いです。そこで、最低限のパケットのみがコントローラへ上がってくるようにうまくフローを設計することで、スイッチが増えてもうまくスケールさせることができます。

=== トラフィックエンジニアリングしやすい

オペレータが参照する対応マニュアルは上司が一括して作成し、オペレータ全員に配ります。このため、問合せをどのエンジニアに転送するかという制御はマニュアルを書き換えるだけでできます。また、問合せ件数をすべて集めるようにしておくことで、誰に問合せが集中しているかといった調査も簡単です。

OpenFlow も同様にたくさんのスイッチをひとつのコントローラで制御します。スイッチの動作ロジックを決めるフローテーブルはコントローラが書き込みます。フローテーブルの書き込みはコントローラが集中して行うため、スイッチが増えても均一な動作をさせることができます。

=== ベンダロックインが防げる

オペレータに必要なスキルは最小限に留められているため、短期間の研修をするだけで人材をオペレータにすることができます。もし大量のオペレータが必要になった場合でも、専門職の人間を雇わなくても人材を確保できます。

OpenFlow スイッチに求められる機能は、OpenFlow 仕様への準拠だけです。このため、OpenFlow に準拠していればどのベンダでのスイッチも (性能の差こそあれ) 同じコントローラで制御できます。これによって、A 社のスイッチでないと動かない、といったリスクを避けることができます。

== まとめ
== 参考文献

