#+TITLE: スライス機能付きスイッチでネットワークを仮想化する
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* スライス機能付きスイッチでネットワークを仮想化する
#+BEGIN_VERSE
実用的な大規模ネットワークの一例として、IaaSのようなクラウドサービスを
実現する仕組みを見ていきましょう。第14章で紹介したルーティングスイッチ
の応用です。
#+END_VERSE

** クラウドサービスを作るには
よく、クラウドサービスの本質は仮想化だと言われます。ユーザに提供する各
種リソースを雲の向こうに仮想化することで、ユーザから見るとあたかも無限
のリソースがいつでも使えるように見せるのです。

クラウドで仮想化されるリソースには主にネットワークとサーバがありますが、
このうちネットワークの仮想化はOpenFlowの得意分野です。ネットワークを
OpenFlowで仮想化してやることで、ユーザごとに専用のネットワークをいつで
もオンデマンドで提供できるようになります。本章で紹介する「スライス機能
付きスイッチ」は、そのような仮想ネットワーク機能を提供するソフトウェア
部品の1つです。

** スライスとは何か？
スライスとは1つの物理ネットワークを論理的なネットワークに分割すること
で、たくさんのユーザが独立した専用ネットワークを使えるようにするもので
す（▼図15-1）。たとえばIaaSのようなたくさんのユーザをなるべく少ない台
数の物理サーバに集約するシステムでは、物理サーバを仮想マシンで、またネッ
トワークをスライスで分割することでそれぞれのユーザに仮想的な専用環境
（仮想マシン＋仮想ネットワーク）を提供します。

○図15-1：スライスとは1つの物理ネットワークをいくつかの独立した仮想ネットワークに分割したもの

スライスを実現する代表的な技術としてVLANがあります。VLANはスイッチをポー
ト単位やMACアドレス単位でスライスに分割できます。またVLANタグと呼ばれ
るIDをパケットにつけることでスイッチをまたがったスライスも作れます。

ただし、VLANにはプロトコル上4094個までのスライスしか作れないという制約
があります。このため、オフィスなどの中小規模ネットワークではともかく、
IaaSのようにユーザ数がゆうに数万を超えるオーダーになる場合には使えませ
ん。

一方OpenFlowによるスライスではこの制約はありません。フローエントリによっ
て同じスライス内にあるホスト同志のみが通信できるようにすれば、既存の
VLANの仕組みを使わなくてもフローエントリだけでスライスを実現できるから
です。つまりOpenFlowを使えば、「スライス数に制限のない仮想ネットワーク」
を作れます。

OpenFlowによるスライス実装の1つが「スライス機能付きスイッチ」です。こ
れは第14章で紹介したルーティングスイッチを改造したもので、スライス数の
上限なくたくさんのスライスを作れます。また、実際にOpenStackなどのクラ
ウド構築ミドルウェアの一部として使うことも考慮されており、REST APIを通
じてスライスの作成/削除などの操作ができます。

** スライスによるネットワーク仮想化
スライス機能付きスイッチが、どのようにネットワークを仮想化するかを見て
みましょう。

○図15-2：スライス機能付きスイッチが作るスライス（仮想ネットワーク）

▼図15-2は、3つのOpenFlowスイッチからなるネットワークを2つのスライスに
分割した例です。スライスごとに1つの仮想スイッチが作られ、スライスに属
するすべてのホストはこの仮想スイッチに接続します。それぞれの仮想スイッ
チは独立しているので、同じスライス内のホスト同士はパケットをやりとりで
きますが，スライスをまたがったパケットのやりとりはできません。

このようにスライスを使うと、ユーザやアプリケーションごとにそれぞれ独立
したネットワークを作れます。ユーザの追加やアプリの起動に応じて、オンデ
マンドで専用ネットワークを作ったり消したりできるのです。もちろん、これ
はVLANなどの特別な仕組みは使わずにOpenFlowだけで実現しているので、スラ
イスの数は無制限に増やせます。

*** スライスの実現方法
実はこのスライス機能は、第14章 で説明したルーティングスイッチへのほん
の少しの機能追加だけで実現しています。コントローラとOpenFlowスイッチの
視点で見ると、スライス機能付きスイッチは次のように動作します（▼図
15-3）。

○図15-3：スライス機能付きスイッチの動作

1. パケットの道順を指定するためのトポロジ情報を収集する
2. スイッチが受信したパケットをPacket Inメッセージで受け取る
3. FDBを検索し、宛先であるホストが接続するスイッチとポート番号を決定す
   る
4. パケットを受信したポートと宛先ホストが接続するポートとが同じスライ
   スに属するか判定する。もし同じスライスではない場合にはパケットを捨
   て、以降の処理は行わない
5. Packet Inを出したスイッチから出口となるスイッチまでの最短パスをステッ
   プ1で収集したトポロジ情報を使って計算する
6. この最短パスに沿ってパケットが転送されるよう、パス上のスイッチそれ
   ぞれにFlow Modを送りフローエントリを書き込む
7. 最初のPacket Inを起こしたパケットも宛先に送るために、出口となるスイッ
   チにPacket Outを送る

スライス機能付きスイッチがルーティングスイッチと異なるのは、ステップ4
が付け加えられている点だけです。ステップ4では送信元と宛先ホストがそれ
ぞれ同じスライスに属しているかを判定し、同じスライスに所属している場合
のみパケットを転送します。それ以外はルーティングスイッチとまったく同じ
です。

** 実行してみよう
ではスライス機能付きスイッチを使ってネットワーク仮想化を実際に試してみ
ましょう。スライス機能付きスイッチもルーティングスイッチと同じくTrema
Appsの一部としてGitHubで公開されています。まだTrema Appsのソースコード
を取得していない人は、次のようにダウンロードしてください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% git clone https://github.com/trema/apps.git ▼<Enter>
#+END_SRC

スライス機能付きスイッチは次の4つのアプリケーションが連携して動作しま
す。トポロジ関連のアプリ（★topology★、★topology_discovery★）を使う
ところはルーティングスイッチと同じです。

- topology：検出したトポロジ情報を管理する
- topology_discovery：トポロジ情報を検出する
- flow_manager：複数スイッチへのフローエントリ書き込みAPIを提供
- sliceable_switch：ルーティングスイッチ本体

これらの4つをセットアップするには、ダウンロードしたTrema Appsの
★topology★、★flow_manager★、そして★sliceable_switch★を次のように
コンパイルしてください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% (cd ./apps/topology; make) ▼<Enter>
% (cd ./apps/flow_manager; make) ▼<Enter>
% (cd ./apps/sliceable_switch; make) ▼<Enter>
#+END_SRC

スライス機能付きスイッチはスライス情報を格納するためのデータベースとし
てsqlite3を用います。次のように★apt-get★でsplite3関連のパッケージを
インストールし、★sliceable_switch★付属のスクリプトで空のスライスデー
タベースを作成してください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% sudo apt-get install sqlite3 libdbi-perl libdbd-sqlite3-perl libwww-Perl ▼<Enter>
% (cd ./apps/sliceable_switch; ./create_tables.sh) ▼<Enter>
A filter entry is added successfully.
#+END_SRC

これで準備は完了です。

*** スライス機能付きスイッチを動かす
それでは、スライス機能付きスイッチを動かしてみましょう。Tremaのネット
ワークエミュレータ機能を用いて、▼図15-4のネットワークを作ります。

○図15-4：スイッチ1台、ホスト4台からなるネットワーク

GitHubから取得したソースコードの中に含まれている設定ファイル
（★sample.conf★）を使えば、図15-4の構成を実現できます。次のように
★sudo★を使ってroot権限で、スライス機能付きスイッチを起動してください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% sudo trema run -c ./apps/sliceable_switch/sample.conf ▼<Enter>
#+END_SRC

それでは起動したスライス機能付きスイッチを使って、さっそくいくつかスラ
イスを作ってみましょう。

*** スライスを作る
Trema Appsの★sliceable_switch★ディレクトリには、スライスを作成するコ
マンド★slice★が用意されています。このコマンドを使って▼図15-5のよう
な2枚のスライス★slice1★、★slice2★を作ってみましょう。

○図15-5：スライスを2枚作る

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% cd apps/sliceable_switch ▼<Enter>
% ./slice create slice1 ▼<Enter>
A new slice is created successfully.
% ./slice create slice2 ▼<Enter>
A new slice is created successfully.
#+END_SRC

スライスができたらスライスにホストを追加します。次のように★host1★、
★host2★のMACアドレスを★slice1★に、★host3★、★host4★のMACアドレ
スを★slice2★に、それぞれ登録します。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ./slice add-mac slice1 00:00:00:01:00:01 ▼<Enter>
A MAC-based binding is added successfully.
% ./slice add-mac slice1 00:00:00:01:00:02 ▼<Enter>
A MAC-based binding is added successfully.
% ./slice add-mac slice2 00:00:00:01:00:03 ▼<Enter>
A MAC-based binding is added successfully.
% ./slice add-mac slice2 00:00:00:01:00:04 ▼<Enter>
A MAC-based binding is added successfully.
#+END_SRC

とても簡単にスライスを作れました。それではネットワークがきちんと分割で
きているか確認してみましょう。

*** スライスによるネットワーク分割を確認する
作ったスライスが正しく動作しているか確認するためには、次の2つを試して
みれば良さそうです。

1. 同じスライスに属するホスト同士で通信できること
2. 異なるスライスに属するホスト間で通信できないこと

これは今までやってきたとおり、★trema send_packet★と★trema
show_stats★コマンドを使えば簡単に確認できます。たとえば次のようにする
と、同じスライス★slice1★に属するホスト★host1★と★host2★で通信でき
ていることがわかります。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% trema send_packet --source host1 --dest host2 ▼<Enter>
% trema send_packet --source host2 --dest host1 ▼<Enter>
% trema show_stats host1 --rx ▼<Enter>
ip_dst,tp_dst,ip_src,tp_src,n_pkts,n_octets
192.168.0.1,1,192.168.0.2,1,1,50
#+END_SRC

異なるスライス間での通信はどうでしょう。これも次のように簡単にテストで
きます。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% trema send_packet --source host1 --dest host4 ▼<Enter>
% trema send_packet --source host4 --dest host1 ▼<Enter>
% trema show_stats host1 --rx ▼<Enter>
ip_dst,tp_dst,ip_src,tp_src,n_pkts,n_octets
#+END_SRC

たしかに、★slice1★に属する★host1★から★slice2★に属する★host4★へ
のパケットは届いていません。以上で、1つのネットワークが2つの独立したス
ライスにうまく分割できていることを確認できました。

** REST APIを使う
スライス機能付きスイッチはOpenStackなどのクラウド構築ミドルウェアと連
携するためのREST APIを提供しています。スライスの作成や削除をRESTとJSON
によるWebサービスとして提供することで、さまざまなプログラミング言語か
ら仮想ネットワーク機能を使えます。これによって、仮想ネットワーク機能を
必要とするいろいろなミドルウェアからの利用がしやすくなります。

スライス機能付きスイッチのREST APIは、Apache上で動作するCGIとして実現
しています（▼図15-6）。クラウド構築ミドルウェアなどからHTTPでアクセス
すると、スライスの変更をスライスDBへと反映し、スライス機能付きスイッチ
はこの内容を実際のスライス構成に反映します。

○図15-6：スライス機能付きスイッチのREST API構成

では、さっそくREST APIをセットアップして使ってみましょう。

*** セットアップ
まずはREST APIの動作に必要ないくつかのパッケージをインストールしましょ
う。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% sudo apt-get install apache2-mpm-prefork libjson-perl ▼<Enter>
#+END_SRC

次はCGIの動作に必要なApacheの設定です。必要な設定ファイルなどはすべて
Trema Appsの★sliceable_switch★ディレクトリに入っていますので、次の手
順でコピーしApacheの設定に反映してください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% cd apps/sliceable_switch ▼<Enter>
% sudo cp apache/sliceable_switch /etc/apache2/sites-available ▼<Enter>
% sudo a2enmod rewrite actions ▼<Enter>
% sudo a2ensite sliceable_switch ▼<Enter>
#+END_SRC

次にCGI本体とスライスデータベース、そしてデータベースを操作するための
各種スクリプトを次の手順で配置します。最後にApacheを再起動し準備完了で
す。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ./create_tables.sh ▼<Enter>
A filter entry is added successfully.
% sudo mkdir -p /home/sliceable_switch/script ▼<Enter>
% sudo mkdir /home/sliceable_switch/db ▼<Enter>
% sudo cp Slice.pm Filter.pm config.cgi /home/sliceable_switch/script ▼<Enter>
% sudo cp *.db /home/sliceable_switch/db ▼<Enter>
% sudo chown -R www-data.www-data /home/sliceable_switch ▼<Enter>
% sudo /etc/init.d/apache2 reload ▼<Enter>
#+END_SRC

正しくセットアップするとファイル構成は次のようになります。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ls /home/sliceable_switch/* ▼<Enter>
/home/sliceable_switch/db:
filter.db slice.db

/home/sliceable_switch/script:
Filter.pm Slice.pm config.cgi
#+END_SRC

REST APIを使う場合には、設定ファイル★sample_rest.conf★を使って、スラ
イス機能付きスイッチを起動します。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% cd ../.. ▼<Enter>
% sudo trema run -c ./apps/sliceable_switch/sample_rest.conf ▼<Enter>
#+END_SRC

*** REST APIでスライスを作る
REST API経由でスライスを作るには、スライスの情報を書いたJSON形式のファ
イルを作り、これをHTTPでREST APIのCGIに送ります。たとえばslice_yutaro
という名前のスライスを作るには、次の内容のファイル（▼リスト15-2）を用
意します。

○リスト15-2：slice.json
#+BEGIN_SRC json
{
  "id" : "slice_yutaro",
  "description" : "Yutaro Network"
}
#+END_SRC

次にこのJSON形式のファイルを★/networks★というURIにPOSTメソッドで送り
ます。Trema Appsの★sliceable_switch/test/rest_if/★ディレクトリに
★httpc★という簡単なHTTPクライアントがあるので、これを使ってみましょ
う。Apacheの待ち受けポートは8888に設定してあるので、次のように実行しま
す。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% cd ./test/rest_if ▼<Enter>
% ./httpc POST http://127.0.0.1:8888/networks ./slice.json ▼<Enter>
#+END_SRC

実行すると次のように作成したスライスの情報が表示されます。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
Status: 202 Accepted
Content:
{"id":"slice_yutaro","description":"Yutaro Network"}
#+END_SRC

*** スライスにホストを追加する
作ったスライスにはホストを追加できます。次のように追加したいホストの
MACアドレスを記述したJSON形式のファイルを用意します（▼リスト15-3）。

○リスト15-3：attachment.json
#+BEGIN_SRC json
{
  "id" : "yutaro_desktop",
  "mac" : "01:00:00:01:00:01"
}
#+END_SRC

ホスト追加のURIは★/networks/<スライスの名前>/attachments★です。作っ
たJSONファイルをこのURIにPOSTメソッドで送ってください。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ./httpc POST http://127.0.0.1:8888/networks/slice_yutaro/attachments attachment.json ▼<Enter>
Status: 202 Accepted
#+END_SRC

スライスに追加するホストの指定には、ホストのMACアドレスだけでなくホス
トが接続するスイッチのポート番号も使えます。次のようにホストが接続する
スイッチのDatapath IDと、接続するポート番号を記述したJSON形式のファイ
ルを用意してください（▼リスト15-4）。もし、このポートから出るパケット
にVLANタグを付与したい場合にはvidにその値を設定します。不要な場合には
65535としてください。

○リスト15-4：port.json
#+BEGIN_SRC json
{
  "id" : "port0",
  "datapath_id" : "0x1",
  "port" : 33,
  "vid" : 65535
}
#+END_SRC

ポート番号を指定してホストを追加するには、★/networks/<スライスの名前
>/ports★というURIを使います。今までと同じく、作ったJSONファイルをPOST
してみましょう。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ./httpc POST http://127.0.0.1:8888/networks/slice_yutaro/ports ./port.json ▼<Enter>
Status: 202 Accepted
#+END_SRC

*** スライスの構成を見る
これまでの設定がきちんと行われているかを確認してみましょう。
★/networks/<スライスの名前>★にGETメソッドでアクセスすることで、スラ
イスに関する情報を取得できます。先ほど作った★slice_yutaro★スライスに
関する情報を取得してみましょう。

▼編集メモ：本文コマンド実行図
#+BEGIN_SRC bash
% ./httpc GET http://127.0.0.1:8888/networks/slice_yutaro ▼<Enter>
Status: 200 OK
Content:
{ "bindings" :
  [
    {
      "type" : 2,
      "id" : "yutaro_desktop",
      "mac" : "01:00:00:01:00:01"
    },
    {
      "vid" : 65535,
      "datapath_id" : "224",
      "type" : 1,
      "id" : "port0",
      "port" : 33
    }
  ],
  "description" : "Yutaro Network"
}
#+END_SRC

作ったスライスとスライスに属するホスト情報がJSON形式で出力されます。な
お、この出力結果は見やすいように改行しインデントしていますが、実際には
改行やインデントなしで表示されることに注意してください。

*** REST API一覧
REST APIは今回紹介した以外にもいくつかの便利なAPIを提供しています（▼
表15-1）。JSONファイルの書式などこのAPIの詳しい仕様は
▼https://github.com/trema/apps/wikiで公開していますので、本格的に使い
たい人はこちらも参照してください。

○表15-1：REST API一覧
#+BEGIN_SRC
動作Method URI
スライス作成	POST	/networks
スライス一覧	GET	/networks
スライス詳細	GET	/networks/< スライスの名前>
スライス削除	DELETE	/networks/<スライスの名前>
スライス変更	PUT	/networks/< スライスの名前>
ホスト追加（ポート指定）	POST	/networks/<スライスの名前>/ports
ホスト一覧（ポート指定）	GET	/networks/<スライスの名前>/ports
ホスト詳細（ポート指定）	GET	/networks/<スライスの名前>/ports/<ポートの名前>
ホスト削除（ポート指定）	DELETE	/networks/<スライスの名前>/ports/<ポートの名前>
ホスト追加（MAC指定）	POST	/networks/<スライスの名前>/attachments
ホスト一覧（MAC指定）	GET	/networks/<スライスの名前>/attachments
ホスト詳細（MAC指定）	GET	/networks/<スライスの名前>/attachments/<ホストの名前>
ホスト削除（MAC指定）	DELETE	/networks/<スライスの名前>/attachments/<ホストの名前>
#+END_SRC

** OpenStackと連携する
スライス機能付きスイッチのOpenStack用プラグインを使うと、OpenStackで仮
想ネットワークまでを含めたIaaSを構築できます。このプラグインは
OpenStackのネットワークコントロール機能であるQuantumにスライス機能を追
加します。

OpenStack Quantumの詳細やセットアップ方法は本書の範囲を超えるので省き
ますが、利用に必要なすべての情報がまとまったWebサイトを紹介しておきま
す。

- OpenStackプラグイン ::
     https://github.com/nec-openstack/quantum-openflow-plugin
- OpenStackのプラグイン（解説ページ） ::
     http://wiki.openstack.org/Quantum-NEC-OpenFlow-Plugin

** まとめ
Hello Tremaから始めたTremaプログラミングも、いつの間にか本格的なクラウ
ドを作れるまでになりました！

- ネットワークを仮想的に分割して使うためのスライス機能付きスイッチが、
  同一のスライス内の通信のみを許可する仕組み
- クラウド構築ミドルウェアからスライスを設定するためのREST APIの使い方

次章ではTremaを使った商用IaaSの1つであるWakame-VDCのアーキテクチャを紹
介します。本章で解説したスライス機能付きスイッチとはまったく異なる「分
散Trema」とも言えるスライスの実現方法は、商用クラウドの作り方として参
考になります。
