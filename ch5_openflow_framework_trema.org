#+TITLE: OpenFlow フレームワーク Trema
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* OpenFlow フレームワーク Trema

#+BEGIN_VERSE
@@html:<ruby><rb>Trema</rb><rp> (</rp><rt>トレマ</rt><rp>) </rp></ruby>@@ を使うと楽しく OpenFlow プログラミングの世界が味わえます。これでいよいよあなたも SDN プログラマの仲間入りです!
#+END_VERSE

#+ATTR_HTML: :width 500pt
[[./ja/images/openflow_framework_trema/izakaya.png]]

** 作って分かる OpenFlow

Part 2 では、いよいよ実際に OpenFlow でネットワークをプログラムする方法
を紹介します。職場や自宅のような中小規模ネットワークでもすぐに試せる実
用的なコードを通じて、「OpenFlow って具体的に何に使えるの？」
「OpenFlow コントローラってどう作るの？」というよくある疑問に答えていき
ます。

題材はなるべく実用例を取り上げるようにし、また OpenFlow やネットワーク
の基礎から説明していくようにしました。このためネットワークの専門家はも
ちろん、普通のプログラマにもすんなり理解できる内容となっているはずです。

まずは、この Part 2 で使う OpenFlow プログラミングのためのフレームワー
ク、Trema をあらためて紹介します。

** Trema とは

Trema は OpenFlow コントローラを開発するための Ruby 向けプログラミング
フレームワークです。GitHub 上でオープンに開発しており、GPL2 ライセンス
のフリーソフトウェアです。公開は 2011 年の 4 月と比較的新しいソフトウェ
アですが、その使いやすさから国内外の企業や大学、および研究機関などです
でに数多く採用されています。

Trema の情報は主に次の URL から入手できます。

- Trema ホームページ：http://trema.github.com/trema/
- GitHub のプロジェクトページ：http://github.com/trema/
- メーリングリスト：http://groups.google.com/group/trema-dev
- Twitter アカウント：http://twitter.com/trema_news

Trema の特長をひとことで言うと、「Ruby on Rails や Sinatra などの Web
フレームワークに影響を受けた、アジャイルな OpenFlow プログラミングフレー
ムワークである」ということです。たとえば最近のアジャイル開発環境ではも
はや当たり前ですが、Trema は開発を効率化する便利なツールを数多く提供し
ています。このように開発サイクル全体の面倒を見てくれるところが Trema の
「フレームワーク」たるゆえんで、他の OpenFlow 開発ツールとはまったく違
うところです。

ここからは実際にこの Trema を使って OpenFlow コントローラを作っていきま
す。まずは Trema をセットアップしましょう。

*** コラム @@html:<ruby><rb>友太郎</rb><rp> (</rp><rt>ゆうたろう</rt><rp>) </rp></ruby>@@の質問: Trema の由来ってなに？
:PROPERTIES:
:EXPORT_OPTIONS: num:nil
:END:

よく「Trema の由来って何ですか？」と聞かれるのですが、これは筆者の1人が
大好きな大阪の「とれまレコード (http://www.fumiyatanaka.com/)」というレ
コードレーベルの名前からきています。テクノミュージックを中心にリリース
する小さなレーベルですが、DJ の間では世界的に知られています。

さてそもそもこの"とれま"とはいったい何でしょう。これは日本がバブルの頃、
道路の「とまれ」という標示がよく「とれま」と間違えて描かれていたという
事実が元になっています。このありえない誤植の原因は、バブル景気時代に急
増した外国人労働者が日本語もままならないまま道路工事現場で働いていたと
いうことにあるそうです。由来を探ってみると意外と面白い事実に行き着くこ
とってありますね。

ちなみに、Trema の公式ロゴマークは [[fig:trema_logo]] です。これは
Twitter の Trema 公式アカウント (=@trema_news=) のアイコンとしても使わ
れています。

#+CAPTION: Trema の公式ロゴマーク
#+LABEL: fig:trema_logo
#+ATTR_HTML: :width 400pt
[[./ja/images/openflow_framework_trema/trema_logo.png]]

もちろん、こんなに大胆な道路標識は日本中どこを探してもありません。この
本の編集者が画像編集ソフトで試しに作ったところ評判が良かったので、その
まま公式ロゴになりました。

** Tremaのセットアップ

Trema は Linux 上で動作します。次のディストリビューションとバージョンで
の動作を保証しています。

- Ubuntu 10.04 以降 (i386/amd64, デスクトップ版)
- Debian GNU/Linux 6.0 (i386/amd64)

なお保証はしていませんが、RedHat などその他の Linux ディストリビューショ
ンでも動作するはずです。

Tremaの提供する =trema= コマンドの実行には root 権限が必要です。まずは、
=sudo= を使って root 権限でコマンドを実行できるかどうか、 =sudo= の設定
ファイルを確認してください。

=sudo= が正しく設定できていることを確認したら、Trema のインストールや実
行に必要ないくつかのソフトウェアをインストールしましょう。

- Rubyインタプリタ ::
     Trema は Ruby と C で作成されていて、アプリケーションの記述には
     Ruby を使います。Trema では Ruby のバージョン 1.8.7 以降が必要です。
- Ruby のパッケージ管理システム RubyGems ::
     Ruby のライブラリは gem という形式で公開されています． =gem= コマ
     ンドを使うと，Trema が依存する gem を簡単にインストールできます．
- Trema 本体 ::
     本書は、Trema バージョン 0.4.1 を使用して執筆しています。
- Trema のコンパイルに必要なコンパイラおよびライブラリ ::
     =gcc= や =libpcap= など，Trema の C で書かれたソースコードをコンパ
     イルするのに必要なコンパイラやライブラリです．

それでは、Ubuntu のパッケージ管理システム =apt-get= を使って必要なパッ
ケージを次のようにインストールしてください。もし他のディストリビューショ
ンを使いたい場合は、コマンド名とパッケージ名を適宜読み替えください．

#+BEGIN_SRC
% sudo apt-get install gcc make ruby rubygems ruby-dev libpcap-dev libsqlite3-dev libglib2.0-dev
#+END_SRC

以上で Trema をインストールするための準備が整いました。続いて Trema を
インストールするには、RubyGems のパッケージで手軽にインストールする方法
と、最新のソースコードを取得して自分でビルドする方法があります。それぞ
れ説明していきましょう。

*** パッケージで手軽にインストールする場合

Trema は RubyGems を使って次のようにコマンド一発で簡単にインストールで
きます。

#+BEGIN_SRC
% gem install trema
#+END_SRC

インストールに成功すると、自動的に Trema のコマンド =trema= にパスが通っ
ているはずです。次のコマンドでバージョンが表示されることを確認してください．

#+BEGIN_SRC
% trema --version
trema version 0.4.1
#+END_SRC

*** ソースコードから最新版をインストールする場合

最新版をインストールしたい人は、GitHub から自分でソースコードをダウンロー
ドしてビルドすることもできます。まず、次のように =git= を使って最新のソー
スコードを取得してください。

#+BEGIN_SRC
% git clone git://github.com/trema/trema.git
#+END_SRC

次のコマンドを実行すると、Trema が依存する RubyGems のパッケージが自動
的にインストールされます。

#+BEGIN_SRC
% cd trema
% sudo gem install bundler
% bundle install
#+END_SRC

次のコマンドで Trema をダウンロードしたディレクトリ以下に Trema がイン
ストールされます。 =make install= のようなシステム全体へのインストール
手順は不要です。

#+BEGIN_SRC
% ./build.rb
#+END_SRC

次のコマンドで =trema= コマンドが正しくインストールされたか確認してくだ
さい。

#+BEGIN_SRC
% ./trema --version
trema version 0.4.1
#+END_SRC

もし必要あればこのディレクトリにパスを通し、 =trema= コマンドが簡単に起
動できるようにしておいてください。

さあ、これで Trema による OpenFlow 開発環境が整いました。それでは早速、
入門の定番 Hello, World を Trema で書いてみましょう。

** Hello, Trema!
今から書くアプリケーションは最も簡単なOpenFlowコントーラの一種で、画面
に「Hello, Trema!」と表示するだけのものです。スイッチとはまったくやり
とりしないスタンドアロンのアプリケーションですが、Tremaで作ることがで
きるすべてのコントローラのテンプレートとなっています。

では、適当なディレクトリにエディタで =hello-trema.rb= というファイルを
開き、次のコードを入力してください。 =.rb= はRubyプログラムの標準的な
拡張子です。なお、Rubyの文法は必要に応じておいおい説明しますので、もし
わからなくてもここでは気にせずそのまま入力してください。

#+INCLUDE: "./vendor/hello_trema/lib/hello_trema.rb" src ruby

意味はまだわからないかもしれませんが、とてもシンプルに書けることはわか
ると思います。それでは細かい文法は後で見るとして「習うより慣れろ」でさっ
そく実行してみましょう。

*** 実行してみよう（trema run）
作成したコントローラは =trema run= コマンドですぐに実行できます。Ruby
はインタプリタ言語なので、コンパイルの必要はありません。ターミナルで次
のように入力すると、この世界一短いOpenFlowコントローラはフォアグラウン
ドプロセスとして起動し、画面に「Hello, Trema!」と出力します。起動した
コントローラは<Ctrl>＋<c>で停止できます。

#+BEGIN_SRC bash
% trema run ./hello-trema.rb
Hello, Trema!  # Ctrl+c で終了
%
#+END_SRC

いかがでしょうか？ =trema= コマンドを使うと、とても簡単にコントローラ
を実行できることがわかると思います。 =trema= コマンドには他にもいくつ
かの機能がありますのでここで簡単に紹介しておきましょう。

** tremaコマンド
=trema= コマンドはTrema唯一のコマンドラインツールであり、コントローラ
の起動やテストなどさまざまな用途に使います。たとえば先ほどの「Hello
Trema!」で見たように、 =trema run= はコントローラを起動するためのコマ
ンドです。起動したコントローラはOpenFlowスイッチと接続しメッセージをや
りとりします。また、次の章以降で触れますが =trema run= コマンドはオプ
ションで仮想ネットワークを作ることもでき、作ったコントローラをこの仮想
ネットワークの中でテストできます（[[fig:trema_overview]]）。このように、
=trema= コマンドはTremaフレームワークにおける中心的なツールで、あらゆ
るコントローラ開発の出発点と言えます。

#+CAPTION: tremaコマンドの実行イメージ
#+LABEL: fig:trema_overview
[[./ja/images/openflow_framework_trema/trema_overview.png]]

=trema= コマンドは =git= や =svn= コマンドと似たコマンド体系を持ってお
り、 =trema= に続けて =run= などのサブコマンドを指定することでさまざま
な機能を呼び出します。こうしたコマンド体系を一般に「コマンドスイート」
と呼びます。

一般的なコマンドスイートと同じく、サブコマンドの一覧は =trema help= で
表示できます。また、サブコマンド自体のヘルプは =trema help［サブコマン
ド］= で表示できます。以下に、 =trema help= で表示されるサブコマンド一
覧をざっと紹介しておきます。いくつかのサブコマンドはまだ使い方を紹介し
ていませんが、続く章で説明しますので今は目を通すだけでかまいません。

- =trema run= ::
                コントローラをフォアグラウンドで実行する。
                =--daemonize（-d）= オプションを付けるとコントローラを
                バックグラウンド（デーモンモード）として実行できる
- =trema killall= ::
                    バックグラウンドで起動しているTremaプロセス全体を
                    停止する
- =trema version= ::
                    Tremaのバージョンを表示する。 =trema --version= と
                    同じ
- =trema ruby= ::
                 TremaのRuby APIをブラウザで表示する
- =trema kill［仮想スイッチ］= ::
     仮想ネットワーク内の指定したスイッチを停止する
     （[[chap:switch_monitoring_tool]]を参照）
- =trema up ［仮想スイッチ］= ::
     仮想ネットワークの指定したスイッチを再起動する
     （[[chap:switch_monitoring_tool]]を参照）
- =trema send_packets ［送信オプション］= ::
     仮想ネットワーク内でテストパケットを送信する
     （[[chap:learning_switch]]を参照）
- =trema show_stats ［仮想ホスト名］= ::
     仮想ネットワーク内の仮想ホストで送受信したパケットの統計情報を表示す
     る（[[chap:learning_switch]]を参照）
- =trema reset_stats= ::
     仮想ネットワーク内の仮想ホストで送受信したパケットの統計情報をリセッ
     トする（[[chap:learning_switch]]を参照）
- =trema dump_flows ［仮想スイッチ名］= ::
     仮想ネットワーク内の仮想スイッチのフローテーブルを表示する
     （[[chap:learning_switch]]を参照）

この章ではさきほど使った =trema run= に加えて、Ruby APIを表示する
=trema ruby= コマンドを覚えておいてください。 =trema ruby= を実行する
とデフォルトブラウザでTrema Ruby APIのページ（[[fig:trema_ruby]]）が開きま
す。プログラミング中いつでもコマンド一発でリファレンスを開けるので大変
便利です。

#+CAPTION: trema rubyコマンドでTrema Ruby APIリファレンスを表示したところ
#+LABEL: fig:trema_ruby
[[./ja/images/openflow_framework_trema/trema_ruby.png]]

では、気になっていたRubyの文法にそろそろ進みましょう。Part2では今後も
たくさんRubyを使いますが、その都度必要な文法を説明しますので心配はいり
ません。しっかりついてきてください。

** 即席 Ruby 入門

外国語の習得にも言えることですが、Ruby を習得する一番の近道は登場する品
詞の種類を押さえておくことです。Ruby に出てくる名前(構成要素)には、その
品詞を見分けるための手がかりとなる視覚的なヒントがかならずあります。名
前に記号が使われていたり、最初の文字が大文字になっていたりするので、断
片的なコードを見てもすぐにどんな品詞かわかります。品詞がわかれば、その
Ruby コードがどんな構造かわかります。

これからそれぞれの品詞について簡単に説明しますが、最初からすべてが理解
できなくとも構いません。しばらくすれば Hello, Trema! プログラムのあらゆ
る部分が識別できるようになっているはずです。

*** キーワード

Ruby にはたくさんの組み込みの語があり、それぞれに意味が与えられています。
これらの語を変数として使ったり、自分の目的に合わせて意味を変えたりはで
きません。

#+BEGIN_SRC
alias   and     BEGIN   begin   break   case    class   def     defined
do      else    elsif   END     end     ensure  false   for     if
in      module  next    nil     not     or      redo    rescue  retry
return  self    super   then    true    undef   unless  until   when
while   yield
#+END_SRC

このうち、「Hello Trema!」では =class= と =def= 、そして =end= キーワー
ドを使いました。

#+BEGIN_SRC ruby
  # 'こんにちは Trema' コントローラ
  class HelloTrema < Controller
    def start
      puts 'Hello, Trema!'
    end
  end
#+END_SRC

=class= キーワードは続く名前 (=HelloTrema=) のクラスを定義します。この
クラス定義は最後の 5 行目の =end= までです。 =def= キーワードは続く名前
(=start=) のメソッドを定義します。このメソッド定義は 4 行目の =end= ま
でです。この =def= や =class= で始まって =end= で終わる領域のことをブロッ
クと呼びます。すべての Ruby プログラムはこのブロックがいくつか組み合わ
さったものです。

*** 定数

=Time= や =Array= や =PORT_NUMBER= など、大文字で始まる名前が定数です。
定数は Ruby の世界では英語や日本語などの自然言語における固有名詞に当た
ります。

英語でも固有名詞は大文字で始めることになっています。たとえば Tokyo
Tower (東京タワー) もそうです。東京タワーは動かすことができませんし、何
か別なものに勝手に変えることもできません。このように、固有名詞は時間と
ともに変化しないものを指します。そして固有名詞と同様、Ruby の定数は一度
セットすると変更できません (変更しようとすると警告が出ます)。

#+BEGIN_SRC ruby
TOKYO_TOWER = '東京都港区芝公園4丁目2-8'
#+END_SRC

「Hello Trema!」の例では =class= キーワードに続く =HelloTrema= と、
=Controller= がそれぞれ大文字で始まるので定数です。つまり、クラス名は定
数なので実行中にその名前を変えることはできません。

#+BEGIN_SRC ruby
  # 'こんにちは Trema' コントローラ
  class HelloTrema < Controller
    def start
      puts 'Hello, Trema!'
    end
  end
#+END_SRC

これで「Hello Trema!」の説明に必要な品詞の説明はおしまいです。それでは
「Hello Trema!」の中身を読み解いていきましょう。

*** コントローラクラスの定義

キーワードの節で説明したように、 =class= キーワードに続く定数から
=end= までで定義されるブロックがクラス定義です。Trema ではすべてのコン
トローラはクラスとして定義され、かならず Trema の =Controller= クラスを
継承します。クラスを継承するには、

#+BEGIN_SRC ruby
  class MyClassName < SuperClassName
    # ...
  end
#+END_SRC

と書きます。

#+BEGIN_SRC ruby
  # 'こんにちは Trema' コントローラ
  class HelloTrema < Controller
    def start
      puts 'Hello, Trema!'
    end
  end
#+END_SRC

=Controller= クラスを継承することで、コントローラに必要な基本機能が
=HelloTrema= クラスにこっそりと追加されます。たとえば雑多な初期化などの
裏仕事を =Controller= クラスが代わりにやってくれるわけです。

*** ハンドラメソッドの定義

さて、こうして定義した =HelloTrema= はどこから実行が始まるのでしょうか？
C で言う =main()= 関数に当たるものがどこにも見あたりません。

その答は Trema の動作モデルであるイベントドリブンモデルにあります。
Trema のコントローラは、様々な OpenFlow イベントに反応するイベントハン
ドラをまとめたクラスとして定義できます。それぞれのイベントハンドラは、
対応する OpenFlow イベントが発生したときに自動的に呼び出されます。たと
えば何か OpenFlow メッセージが到着したとき、もしそのメッセージに対応す
るハンドラメソッドがコントローラクラスに定義されていれば、Trema がその
メソッドを発見して呼んでくれます。

Trema でよく使われるイベントをここにリストアップします。

- =start= ::
            コントローラの起動時に呼ばれる
- =switch_ready=, =switch_disconnected= ::
     スイッチがコントローラに接続または切断したときに呼ばれる
     ([[chap:switch_monitoring_tool]]にて詳説)
- =packet_in= ::
                未知のパケットが到着したという Packet In メッセージ到着
                時に呼ばれる([[chap:learning_switch]]にて詳説)
- =flow_removed= ::
                   フローが消された時の Flow Removed メッセージ到着時に
                   呼ばれる([[chap:traffic_monitor]]にて詳説)

ハンドラメソッドの定義は、 =def= キーワードに続く名前から =end= までの
ブロックです。たとえば =HelloTrema= の例では =start= ハンドラメソッドを
定義しており、これがコントローラの起動イベント発生時、つまり =trema
run= でコントローラを起動したときに自動的に呼ばれます。 =start= ハンド
ラメソッド中の =puts= は Ruby 組込みのメソッドで、C の =puts()= 関数と
同じく文字列を標準出力へ改行付きで出力します。

#+BEGIN_SRC ruby
  # 'こんにちは Trema' コントローラ
  class HelloTrema < Controller
    def start
      puts 'Hello, Trema!'
    end
  end
#+END_SRC

これで「Hello Trema!」の説明はおしまいです。Trema で作るコントローラは
基本的にこの「Hello, Trema!」と同じ構成をしています。つまり、これをベー
スにいくつか必要なハンドラメソッドを追加していけば、より複雑で実践的な
コントローラも作れます。

**** コラム @@html:<ruby><rb>取間</rb><rp> (</rp><rt>とれま</rt><rp>) </rp></ruby>@@先生いわく: ハンドラメソッドの自動呼び出し
:PROPERTIES:
:EXPORT_OPTIONS: num:nil
:END:

プログラミング経験の長い読者の中には、「ハンドラメソッドを定義しただけ
なのに、なぜ Trema はこのメソッドを自動的にみつけられるんだろう？」と不
思議に思った人がいるかもしれません。プログラム中にどういう関数があるか
(=コンパイル時情報) をプログラム自身が知る (=実行時) ことはむずかしいか
らです。特に C ではコンパイル時と実行時の間にはぶ厚いカーテンが引かれて
いるので普通は無理です。

実は、Ruby にはイントロスペクション(リフレクションや自己反映計算とも呼
ぶ)と呼ばれる機能があり、オブジェクトが自らの持つメソッドを実行時に調べ
ることができます。たとえば Packet In メッセージが到着したとき、コントロー
ラはイントロスペクションして自分が =packet_in= というメソッドを持ってい
るかどうかを実行時に調べます。そしてもしみつかればそのメソッドを呼んで
あげるというわけです。この機能は =Controller= クラスを継承したときに自
動的にコントローラへと導入されます。

** Tremaのファイル構成

最後に Trema のファイル構成を見ておきましょう。Trema をダウンロードする
と、いくつかのファイルとディレクトリがあることがわかります。次に主要な
ものを挙げましょう。

- =bin/= ::
           各種コマンドの本体が置かれるディレクトリ
- =build.rb= ::
               ビルドスクリプト
- =cruise.rb= ::
                すべてのテストコードを実行するテストスイート(Trema 開発
                者向け)
- =features/= ::
                受け入れテスト一式 (Trema 開発者向け)
- =ruby/= ::
            Rubyライブラリのソースコード
- =spec/= ::
            Rubyのユニットテスト一式 (Trema 開発者向け)
- =src/examples/= ::
                    サンプルアプリ
- =src/lib/= ::
               Cライブラリのソースコード
- =tmp= ::
          ログファイルや PID ファイルといった一時ファイルの置き場
- =trema= ::
            =trema= コマンド
- =unittests/= ::
                 C のユニットテスト一式 (Trema 開発者向け)

この中でも Trema でコントローラを作りたい人が読むべきは、サンプルアプリ
(=[trema]/src/examples=)です。

*** コラム @@html:<ruby><rb>取間</rb><rp> (</rp><rt>とれま</rt><rp>) </rp></ruby>@@先生いわく: Trema のテスト

Trema にはずいぶんたくさんのテストコードが付いていて、Trema 開発者がテス
トをとても重視していることがわかると思います。テストの実行頻度も徹底し
ていて、開発者が新しいコードをコミットする度にすべてのテスト
(=cruise.rb= スクリプト)を自動的に実行することで、「いつダウンロードし
ても正しく動く」ことを保証しているのです。この手法をよく「継続的インテ
グレーション」と呼びます。

# @warn(テストランプと天井の蛍光灯がかぶって見づらいので、写真を撮り直し)
#+CAPTION: テストの実行結果を示すランプ
#+LABEL: fig:ccrb
#+ATTR_HTML: :width 400pt
[[./ja/images/openflow_framework_trema/ccrb.jpg]]

Trema を壊さないために、1つおもしろい工夫があります。[[fig:ccrb ]]は Trema
開発者の机に置いてあるランプで、テストの実行結果をランプの色で視覚的に
フィードバックします。テストがすべて通るとランプが緑色に光り、もしエラー
が起こった場合には、ランプが赤く光り開発メンバー全員にメールが飛びます。
これによって、万が一壊してしまっても必ず誰かが気付けるようにしています。

このしくみには、環境構築が手軽な CruiseControl.rb
(http://cruisecontrolrb.thoughtworks.com/) と自作プラグインを使っていま
す。

** サンプルアプリ

サンプルアプリ(=[trema]/src/examples/=)は簡単なOpenFlowアプリケーション
をたくさん含んでおり、実際のAPIの使い方を調べるのに便利です。以下におも
なサンプルアプリをまとめます(括弧内は =[trema]/src/examples/= 内のディ
レクトリ名)。このうちいくつかは続く章で詳しく説明していきます。

- こんにちはTrema (=hello_trema=) ::
     この章で説明した「Hello Trema!」と表示するだけのサンプル。これを
     =trema run= コマンドで実行すれば、手っ取り早く Trema を試すことが
     できる (Trema を始めたばかりの初心者向け)
- Packet In (=packet_in=) ::
     OpenFlow メッセージの中でも重要な Packet In メッセージをハンドルす
     るサンプル。OpenFlow メッセージハンドラの定義方法や、Packet In メッ
     セージの取り扱いの基本が学べる
- スイッチの監視 (=switch_monitor=) ::
     スイッチがコントローラへ接続したり逆に切断したときのイベントを捕捉
     するサンプル。複数のハンドラを使った少し複雑なコントローラの実装が
     学べる ([[chap:switch_monitoring_tool]]にて詳説)
- OpenFlow メッセージのダンプ (=dumper=) ::
     コントローラが受け取るすべての OpenFlow メッセージを文字列としてダ
     ンプするサンプル。さまざまなハンドラの書き方リファレンスとして役に
     立つ
- スイッチ情報 (=switch_info=) ::
     スイッチの詳細情報を要求する Features Request メッセージをコントロー
     ラに送信し、スイッチから受信したスイッチ情報を出力するサンプル。コ
     ントローラからスイッチへ OpenFlow メッセージを送る方法が学べる
- リピータハブ (=repeater_hub=) ::
     いわゆるバカハブ(ダムハブ)の実装。重要なOpenFlowメッセージである
     Flow ModとPacket Outの基本が学べる。[[chap:tdd]]では少し進んだ話題とし
     て、これを題材にコントローラのテスト駆動開発手法を学ぶ
- ラーニングスイッチ (=learning_switch=) ::
     普通のスイッチをエミュレートするサンプル。FDB などスイッチの基本構
     成を学ぶことができる ([[chap:learning_switch]]で詳説)
- トラフィックモニタ (=traffic_monitor=) ::
     ラーニングスイッチを拡張し、ユーザごとのトラフィックを測れるように
     したもの。フローに含まれる統計情報の利用例として役に立つ
     ([[chap:traffic_monitor]]にて詳説)
- 複数スイッチ対応ラーニングスイッチ (=multi_learning_switch=) ::
     ラーニングスイッチの複数スイッチ版です。ラーニングスイッチとの違い、
     とくにスイッチごとに FDB を管理する部分に注目してください。
- シンプルルータ (=simple_router=) ::
     ルータの基本機能を実装したサンプル。ルータでのパケットの書き換えと
     転送、およびルーティングテーブルの実装などルータの基本が学べる
     ([[chap:router_part1]]および[[chap:router_part2]]で詳説)

Trema にはたくさんの API があり、上述したサンプルではまだまだすべてを紹
介しきれていません。新しいサンプルアプリを作った人は、ぜひ GitHub で
pull リクエストを送ってください。あなたの名前が Trema プロジェクトの貢
献者リスト (https://github.com/trema/trema/graphs/contributors) に載る
かもしれません!

** まとめ

さて、これで Trema の基本はおしまいです。この章では Trema をセットアッ
プし、すべてのコントローラのテンプレートとなる「Hello, Trema!」コントロー
ラを書きました。この章で学んだことを簡単にまとめてから、実践的なコント
ローラの開発に入っていくことにしましょう。

- Trema は RubyGems またはソースコードからビルドしてインストールできる
- コントローラは =trema run= コマンドでコンパイル無しにすぐ実行できる
- コントローラは Ruby のクラスとして定義し、 =Controller= クラスを継承
  することで必要なメソッドや機能が取り込まれる
- コントローラクラスに各種イベントに対応するハンドラを定義することで
  OpenFlow コントローラを実装できる。たとえば、起動イベントに対応するハ
  ンドラは =start=
- Trema のファイル構成と主なサンプル一覧

これで基礎は十分にできました。次の章では、いよいよ実用的な OpenFlow コ
ントローラを書き実際にスイッチをつないでみます。

** 参考文献

Ruby プログラミングが初めてという人達のために、入門に役立つサイトや本を
いくつか紹介します。

- Why's (Poignant) Guide to Ruby (http://mislav.uniqpath.com/poignant-guide/) ::
     著者は大学や職場でいろいろなプログラミング言語を勉強してきましたが、
     これほど読んでいて楽しい本に出会ったことはありません。この本は
     Ruby 界の謎の人物 _why 氏による風変りな Ruby 入門で、プログラミン
     グ言語の解説書にもかかわらずまるで小説やマンガのようにリラックスし
     て読めます。この章の Ruby の品詞の説明は、この本を参考にしました。
     (日本語版はこちら
     http://www.aoky.net/articles/why_poignant_guide_to_ruby/)。
- TryRuby (http://tryruby.org/) ::
     同じく _why 氏によるブラウザで動く Ruby 環境です。Ruby を試してみ
     たいけどインストールするのが面倒という人は、まずはここで Ruby を試
     してみましょう。 =help= と打つと 15 分の短い Ruby チュートリアルが
     始まります。
- プログラミング Ruby 第 2 版 (Dave Thomas、Chad Fowler、Andrew Hunt 著／田和勝、まつもとゆきひろ 訳／オーム社) ::
     Ruby の完全なリファレンスです。本気で Ruby を勉強したい人は持って
     いて損はしません。この本だけあれば十分です。
