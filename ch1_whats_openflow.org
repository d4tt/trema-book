#+TITLE: OpenFlowって何？
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* OpenFlowって何？
#+BEGIN_VERSE
近ごろ話題のOpenFlowって、どんな仕組みで何がうれしいのでしょうか？難し
いネットワーク用語を使わずに、身近なたとえ話で解説します。
#+END_VERSE

#+ATTR_HTML: :width 500pt
[[./images/whats_openflow/incredible_machine.png]]

** ソフトウェアで思いどおりにコントロールする
#+BEGIN_QUOTE
無精（Laziness）：エネルギーの総支出を減らすために、多大な努力をするよ
うに、あなたをかりたてる性質。こうして労力を省くために書いたプログラム
は他人も使うようになり、そのプログラムに関する質問にいちいち答えずに済
ますためにドキュメントを書くようになる。それゆえ、プログラマにとって最
も重要な素質である。またそれゆえ、この本が存在するのである。（『プログ
ラミングPerl』、Larry Wallら、オーム社）
#+END_QUOTE

優れたプログラマが持つハッカー気質の1つに「無精」があります。大好きな
コンピュータの前から一時も離れずに、どうやってジャンクフードを手に入れ
るか……普通の人からするとただの横着に見えるかもしれませんが、ハッカー
達にとってそれはいつでも大きな問題でした。

ソフトウェアによる横着はハッカーが最も創造性を発揮する分野の一つです。
次の3つの話は、いずれもただ横着のためだけに高い技術力を駆使したという
すごい例です。

 1. ハッカーの巣窟として有名なMITのAIラボにはかつて、コンピュータから
    オンラインでピザを注文できるUNIXコマンドが存在しました
    [fn:xpizza]。ハックしていて腹が減ったらコマンドをたたいてピザを
    取る、なんとも横着です。
 2. コンピュータサイエンスの名門、カーネギーメロン大学にはコーク・マシ
    ンという変わったコーラ自販機があり、UNIXコマンド一発でコーラの冷え
    具合を確認できるようになっています[fn:coke_machine]。遠くの自販機
    まで行って **ぬるい** コーラをつかまされないための工夫です。
 3. RFC（Request For Comment）で標準化されているコーヒーポットプロトコ
    ルでは、遠隔地にあるコーヒーポットのコーヒーの量を監視したり、コー
    ヒーを自動的にいれたりするための半分冗談のインターフェースを定義し
    ています[fn:rfc2324]。本当に実装してしまった人もいたそうですから驚
    きです。

こうした「ソフトウェアで楽をする」ハックのうち、もっとも大規模な例が最
新鋭のデータセンターです。クラウドサービスの裏で動くデータセンターは極
めて少人数のエンジニアが運用しており、大部分の管理作業をソフトウェアに
よって極限まで自動化している、という記事を読んだことがある人も多いでしょ
う。このようにピザやコーラ、コーヒーのようなお遊びから、データセンター
のように一筋縄ではいかない相手まで、ソフトウェアで「モノ」を思いどおり
にコントロールするのは何よりも楽しく、そして実際に役に立つハックの一種
です。

** SDN：ネットワークをソフトウェアで制御しよう
その中でもネットワークをハックする技術の1つが、本書で取り上げる
OpenFlowです。簡単に言えば、OpenFlowはネットワークスイッチの動作を制御
するための標準プロトコルの1つです。OpenFlowを使えばスイッチ1つひとつの
動作をソフトウェアから自由に書き換えられるので、究極的にはネットワーク
全体の動作をソースコードとして記述できます。これをSoftware Defined
Networking（SDN、ソフトウェアで定義されるネットワーク）と呼び、
OpenFlowはSDNを実現する代表的な技術として注目を集めています。

OpenFlowの登場によって、これからはネットワークもプログラミングの対象に
なります。「いまだにネットワークを手で管理してるの？そんなのソフトウェ
アで横着しようぜ！」こんな声が聞こえてきそうです。たしかに、今までネッ
トワーク管理と言えば専門のオペレータ達による手作業がメインでした。横着
できる部分はたくさんあるはずです。

ハッカーに負けない創造性とOpenFlowのプログラマブルな特性が組み合わされ
ば、次のような「究極の自動化」も夢ではなくなります。

- 障害やトラフィック情報など、あらゆる情報を収集し集中管理できるネット
  ワーク
- ユーザやアプリケーションの追加・削除に応じて、自動的に構成を変更する
  ネットワーク
- 追加投資をしなくても、既存のインフラを目一杯まで使えるように最適化す
  るネットワーク

本書はこれらすべてのトピックを扱います。自宅や職場のような中小規模ネッ
トワークからデータセンターのような超大規模ネットワークまで、具体的な
OpenFlowの適用例を見ながら「OpenFlowってどんなもので、具体的に何に使え
るのだろう？」という素朴な疑問に答えます。また「さっそくOpenFlowを使っ
てすごいネットワークを作ってみたい!」というプログラマ向けには、実際に
動かせる実用的なコードをたくさん載せました。

本書を読み進めるにあたって、ネットワークやプログラミングの深い知識は不
要です。基本から1つひとつ説明しますので、ネットワークの専門家はもちろ
ん、プログラマやシステムエンジニア、そして営業職や管理職などなど
OpenFlowに興味を持つ方であれば誰でもすんなり理解できるように構成してあ
ります。ではさっそく、OpenFlowの仕組みを理解しましょう。

** OpenFlowの仕組み
OpenFlowの仕組みを説明するために、ここからちょっとした@<bou>{たとえ}話
をします。みなさんもきっと利用したことがあると思いますが、よくあるカス
タマーサポートを思い浮かべてください。そう、テレビとかパソコンの調子が
悪くなったときに、フリーダイヤルで相談するアレです。それって、どこが
OpenFlowと関係あるのでしょう？

実はOpenFlowの基本的な仕組みはカスタマーサポートにとても良く似ているの
です。これからお話しする2つのストーリーが分かれば、OpenFlowの95%を理解
できたも同然です。それではさっそく、このストーリーの主人公の@<ruby>{友
太郎,ゆうたろう}君と、カスタマーサポートセンターで働く青井さん、そして
上司の宮坂主任の3人に登場してもらいましょう。

*** ストーリー1：エアコンが壊れた
今年もエアコンの活躍する季節がやってきました。ところが友太郎君のエアコ
ンはどうにも調子が良くありません。そこで取扱説明書に載っていたカスタマー
サポートに電話することにしました。自動音声に従って問題ありそうな項目を
すべてチェックしてみましたが、いっこうに解決しません。結局、自動音声は
あきらめて電話オペレータに相談することになりました。

「はい、こちらカスタマーサポートセンターです。担当はわたくし青井がうけ
たまわります。ご用件は何でしょうか？」

青井さんはヨーヨーダイン・エアコン社で働く電話オペレータです。お客さん
から不具合の症状を聞き出し、問題を解決できる適切なエンジニアに電話をつ
なぐのが仕事です（[[fig:yoyodyne_support]]）。

#+CAPTION: 電話オペレータはお客さんからの問い合わせを適切なエンジニアへ転送
#+LABEL: fig:yoyodyne_support
[[./ja/images/whats_openflow/yoyodyne_support.png]]

「なんだかリモコンの調子が悪いんです。温度表示がずっと点滅しているんで
すけど、どうしたら直りますか?」

青井さんは手元の対応マニュアルを開きます（[[table:manual1]]）。対応マ
ニュアルには故障の箇所と、それを直せるエンジニアの内線番号が書かれてい
ます。続く数字はそれぞれの問い合わせ件数です。

#+CAPTION: 電話オペレータ用対応マニュアル
#+LABEL: table:manual1
| 故障の箇所   | 担当エンジニアの内線番号 | 問い合わせ件数 |
|--------------+--------------------------+----------------|
| リモコン     |                 555-2222 | 8件            |
| エアコン本体 |                 555-4444 | 6件            |
| 室外機       |                 555-3333 | 4件            |

ちょうどマニュアルの先頭に探していた項目がみつかりました。

「ご不便をおかけしました。担当のエンジニアにただいまおつなぎいたします」

電話の転送を終えると、青井さんはリモコン故障の問い合わせ件数を8件から9
件にアップデートしました（[[table:manual2]]）。

#+CAPTION: 問い合わせ件数をアップデートする
#+LABEL: table:manual2
| 故障の箇所   | 担当エンジニアの内線番号 | 問い合わせ件数 |
|--------------+--------------------------+----------------|
| リモコン     |                 555-2222 | **9件**        |
| エアコン本体 |                 555-4444 | 6件            |
| 室外機       |                 555-3333 | 4件            |

こうすることでどんな故障の問い合わせが多いかを社内にフィードバックでき
ます。たとえば開発部署は次の製品開発にこの情報を生かせるというわけです。

**** これをOpenFlowに置換えると…
OpenFlowの世界では、パケットを送信するホストがお客さんの友太郎君、パケッ
トを転送するOpenFlowスイッチが電話オペレータの青井さんに対応します
（[[fig:openflow_host_switch]]）。ホストがパケットを送ると、OpenFlowスイッ
チはパケットの中身に応じてパケットを適切な宛先に転送します。これはちょ
うど、青井さんが友太郎君からの問い合わせ内容に応じて適切な担当エンジニ
アに電話を転送するのと同じです。

#+CAPTION: OpenFlowではホストがお客さん、スイッチが電話オペレータ、そしてフローテーブルがマニュアルに対応
#+LABEL: fig:openflow_host_switch
[[./ja/images/whats_openflow/openflow_host_switch.png]]

OpenFlowスイッチは、その動作が「マニュアル化」されています。カスタマー
サポートの例では、青井さんはマニュアルから転送先の番号を調べました。
OpenFlowスイッチは、パケットの転送先をスイッチ内のフローテーブルと呼ば
れるデータベースを参照して決めます。青井さんの業務がすべてマニュアル化
されているのと同じく、OpenFlowスイッチの動作はすべてこのフローテーブル
の中身によって決まります。

**** 転送情報を管理するフローテーブル
フローテーブルには、「こういうパケットが届いたら、ポートｘ番に転送する」
というルールがいくつか記録されています。このルールをフローエントリと呼
びます。フローエントリはちょうど「リモコンの故障に関する問い合わせが来
たら、内線555-2222に転送する」といったマニュアルの各項目に対応します。

実際のフローテーブルの例を見てみましょう。[[table:story1_openflow]] はある
スイッチのフローテーブルで、各行が1つひとつのフローエントリに対応しま
す。フローエントリはマッチングルール、アクション、そして統計情報の3つ
の要素から成ります。

#+CAPTION: フローテーブルとフローエントリの例
#+LABEL: table:story1_openflow
| マッチングルール                     | アクション       | 統計情報   |
|--------------------------------------+------------------+------------|
| 送信元IPアドレスが192.168.1.100      | ポート8番に転送  | 80パケット |
| 宛先IPアドレスが192.168.10.92        | ポート10番に転送 | 14パケット |
| 送信元MACアドレスが00:50:56:c0:00:08 | ポート1番に転送  | 24パケット |

- マッチングルール ::
     マッチングルールは届いたパケットをどう処理するかをフローテーブル
     から探す「条件」として使われます。たとえば「リモコンの調子がおか
     しい」という問い合わせから転送先を決めたように、パケットの特徴に
     合うマッチングルールから処理方法、つまりアクションを決めます。

- アクション ::
               アクションは届いたパケットをどう扱うかという「処理方法」
               にあたります。たとえば「内線555-4444に転送」と同じく、
               アクションには「スイッチのポート8番に転送」などと指定し
               ます。なお、アクションでは単純な転送だけでなくパケット
               の書き換えや破棄などもできます。

- 統計情報 ::
             統計情報はフローエントリごとのパケット処理量の記録です。
             たとえば「リモコン関連の問い合わせ数は9件」とマニュアルに
             記録したように、「このフローエントリに従って転送したパケッ
             トは80個」などといった情報が書き込まれます。

いかがでしょうか？カスタマーサポートとOpenFlowは驚くほどよく似ているこ
とがわかると思います。実はOpenFlowはとても単純で理解しやすい仕組みなの
です。

*** ストーリー2：またエアコンが故障
エアコンもしばらくは順調でしたが、1か月後また調子が悪くなってしまいま
した。友太郎君はふたたびカスタマーサポートへダイヤルします。

「エアコンの排水ホースがすぐに詰まっちゃうんです」

青井さんはいつものように手元の対応マニュアルを調べましたが、困ったこと
に排水ホースの項目は載っていません。どうやらまったく新しい不具合のよう
です。

「すみませんが少々お待ちください。対応可能なエンジニアがいるかどうか確
認いたします」

そして電話口には録音された"しばらくお待ちください"のメッセージとどこか
軽快な音楽が流れはじめました。

対応マニュアルに対処法が見つからなかった場合、上司に聞く

こういう時、青井さんがいつも頼るのは上司の宮坂主任です
(@<img>{yoyodyne_support_miyasaka})。

「宮坂さん、排水ホースについての問い合わせが来ているのですが、誰につな
げばよいですか?」

「それだったら山本君が適任だ」

転送先が分かった青井さんは友太郎君の待つ電話に戻ります。

「大変お待たせいたしました。担当のエンジニアに転送いたします」

一度目の問い合わせと比べてかなり時間がかかってしまいましたが、これでよ
うやく一件落着です。さらに青井さんは、宮坂主任から教わった山本君の内線
番号をマニュアルに追加します（[[table:manual3]]）。次からの同じ問い合わせ
にすばやく答えられるようにするためです。

#+CAPTION: マニュアルに新しい症状と転送先を追加してアップデート
#+LABEL: table:manual3
| 故障の箇所     | 担当エンジニアの内線番号 | 問い合わせ件数 |
|----------------+--------------------------+----------------|
| リモコン       |                 555-2222 | 9件            |
| エアコン本体   |                 555-4444 | 6件            |
| 室外機         |                 555-3333 | 4件            |
| **排水ホース** |             **555-5555** | **1件**        |

**** これをOpenFlowに置換えると…
OpenFlowでこの上司にあたるのがコントローラと呼ばれるソフトウェアです
（[[fig:openflow_host_switch_controller]]）。OpenFlowでネットワークをプロ
グラミングする場合、プログラマが書くのはこのコントローラの部分です。頭
脳であるコントローラをソフトウェアとして記述することで、ネットワークを
自由自在に制御できるというわけです。

#+CAPTION: フローテーブルにパケットのエントリが見つからなかった場合、コントローラに問い合わせる
#+LABEL: fig:openflow_host_switch_controller
[[./ja/images/whats_openflow/openflow_host_switch_controller.png]]

フローテーブルに載っているパケットはスイッチが高速に転送してくれますが、
フローテーブルに載っておらずスイッチ側でどう処理してよいかわからないパ
ケットが届くこともあります。この場合スイッチはこのパケットをコントロー
ラに上げて「このパケットはどうすればよいですか？」と指示をあおぎます。
コントローラはこのパケットの中身を調べ、どうすべきかという指示、つまり
フローエントリをフローテーブルに書き込んでやります。

このようにフローテーブルに載っていないパケットが届くと、コントローラへ
の問い合わせが発生するのでパケット転送がとても遅くなります。しかし、ス
イッチの起動時にコントローラが必要なフローエントリをあらかじめ書き込ん
でおくようにしておけば、スイッチ側だけで素早く処理できます。

***** ゆうたろうの質問: コントローラへの問い合わせはどのくらい遅い？
:PROPERTIES:
:EXPORT_OPTIONS: num:nil
:END:

フローテーブルを使わずに、毎回コントローラが指示を出すとどうなるでしょ
うか？結果は、何倍も遅くなります。試しに手元の環境で簡単なプログラムを
書き、ソフトウェアスイッチで転送する場合とコントローラですべて処理する
場合を比べてみたところ、性能に5倍もの差が出ました。もちろんこれはおお
ざっぱな値ですが、数倍は遅くなるという目安になります。また今回の実験は
ソフトウェアスイッチでしたが、ハードウェアスイッチを使うとこの差はさら
に広がります。

** OpenFlow のうれしさ
OpenFlowの仕組みの大枠は理解できたと思います。それでは最も肝心な部分、
「OpenFlowって何がうれしいの？」を掘り下げてみましょう。

*** 自動化やシステム連携がしやすい
カスタマーサポートセンターでは、あらかじめ適切なマニュアルを作っておけ
ば業務はすべて電話オペレータが自動的にやってくれます。これによって、全
体の監督は管理職で実務は電話オペレータ、というふうにきっちりと分業でき
るようになります。たとえば電話オペレータが実務をやってくれている間、管
理職は他の部署との協業や調整に集中できます。

同様に、OpenFlowスイッチの制御はすべてソフトウェアであるコントローラで
実現しているので、ネットワーク管理の自動化が容易です。さらにコントロー
ラがRubyやPython、Javaなどよく知られた汎用言語で書いてあれば、既存のシ
ステムやサービスなどとの連携も簡単です。たとえば、アプリケーションから
の要求やビジネスポリシーの変更、問題発生などさまざまなトリガーに応じて
ネットワークの設定を変更するといった、一歩進んだ自動化もできます。

*** ネットワークトラフィックを集中制御しやすい
カスタマーサポートセンターでは問い合わせ件数の情報はすべて管理職に上がっ
てくるため、混み具合の把握や全体の交通整理が楽です。もし特定のエンジニ
アに問い合わせが集中しても、問い合わせがうまくばらけるようにマニュアル
を通じて電話オペレータの全員に指示できます。反対にもし各オペレータが個々
に判断してしまうと、おなじエンジニアに問い合わせが偏ることは避けられま
せん。

OpenFlowでもすべてのトラフィック情報はコントローラに上がってくるため、
全体を見たトラフィックの最適化が可能です。各種統計情報を集計することで、
コントローラはネットワーク全体のトラフィックデータを集められます。そし
てその情報をもとに各スイッチのフローテーブルを更新することで、全体的に
見て最適となるパケットの通り道を引けます。反対にもし個々のスイッチが判
断してしまうと、うまくトラフィックを分散できません。

*** ソフトウェア開発のテクニックやツールが使える
コントローラはソフトウェアの一種なので、ソフトウェア開発で長年培われて
いるさまざまなテクニックやツールをネットワーク構築に応用できます。

- 近年主流のアジャイル開発手法でコントローラを開発すれば、反復的な機能
  追加が可能。フィードバックを受けながら少しずつバージョンアップしてい
  くことで、ネットワークを段階的に構築できる
- コントローラのユニットテストや受け入れテストを書くことで、ネットワー
  ク全体を自動的にテストできる。テスト結果の出力は、そのまま仕様書の一
  部になる。ExcelやWordで書いた仕様書を別個に管理する必要はない
- コントローラのソースコードや関連データをgitなどのバージョン管理ツー
  ルで管理すれば、ネットワーク全体のバージョン管理やバージョン間の差分
  のチェック、および巻き戻しも可能だろう

***** 取間先生曰く：OpenFlowは回転ずし！？
:PROPERTIES:
:EXPORT_OPTIONS: num:nil
:END:

従来のルータやスイッチは、ベンダが提供する機能をそのまま使うしかありま
せんでした。たとえば、100個ある機能のうち本当に使いたい機能は10個だけ
だったとしても、100機能つきのルータを買うしかありません。これではある
意味、フルコースしか頼めないフレンチレストランのようなものです。一部の
機能しか利用していないのに障害ポイントが無数にあるので、切り分けやデバッ
グが難航することもままあります。

OpenFlowは回転ずしです。フランス料理の味に近づけるのは大変ですが、必要
な機能だけをチョイスしてがんばって実装すれば、思い通りの機器が手に入る
のです。

** OpenFlowで気をつけること
もちろん、OpenFlowでもうれしいことばかりではありません。コントローラで
制御を一手に引き受けるというモデルになっているため、スイッチの台数が増
えたときのスケーラビリティに気をつける必要があります。もし、フローテー
ブルに載っていないパケットが一気にコントローラへ到着すると、最悪の場合
コントローラが停止してしまいます。

そこで、OpenFlowの使いどころやフローテーブルの残り容量には特に注意する
必要があります。たとえばOpenFlowスイッチをインターネットのような多種多
様のパケットが流れる環境につなげると、すぐにコントローラへの問い合わせ
が殺到しフローテーブルがいっぱいになって破綻してしまいます。しかしデー
タセンターなどの閉じた環境では、トラフィックの特徴や流れるパケットの種
類はあらかじめ見当を付けておけます。そこで最低限のパケットのみがコント
ローラへ上がってくるようにうまくネットワークとフローエントリを設計する
ことで、スイッチが増えてもスケールさせることができます。

** まとめ
本章ではSDNを実現するための部品であるOpenFlowを解説しました。OpenFlow
はフローテーブルを持つスイッチと、フローテーブルの内容を集中制御するソ
フトウェアであるコントローラから成ります。ネットワークの制御をソフトウェ
ア化することによって、自動化やさまざまなシステムとの連携、トラフィック
制御のしやすさ、ソフトウェア技術の応用などなどさまざまな恩恵があります。

次章では、具体的なOpenFlowの使いどころをいくつか見ていきましょう。

* Footnotes

[fn:xpizza] MITの `xpizza` コマンドのマニュアル： http://stuff.mit.edu/afs/sipb/project/lnf/other/CONTRIB/ai-info

[fn:coke_machine] カーネギーメロン大のコーク・マシンのサイト： http://www.cs.cmu.edu/~coke/

[fn:rfc2324] RFC 2324：http://www.ietf.org/rfc/rfc2324.txt
