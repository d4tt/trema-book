#+TITLE: インテリジェントなパッチパネル
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* インテリジェントなパッチパネル
#+BEGIN_VERSE
日々のネットワーク管理に役立ち、さらに SDN の入門にもなるのがこの
OpenFlow で作るパッチパネルです。その上ソースコードも簡単とくれば、試
さない手はありません。
#+END_VERSE

** 便利なインテリジェント・パッチパネル
無計画にスイッチやサーバを増やしてしまうと、ネットワークケーブルの配線
は悲惨なまでにごちゃごちゃになります。からみあったケーブルのせいで見通
しが悪くなるのはもちろん、そのままさらに増築を続けると、最悪の場合は配
線のやり直しとなります。こうなってしまう一番の原因は、スイッチやサーバ
同士をケーブルで直接つないでしまうことです。これでは、つなぐデバイスを
増やせば増やすほどごちゃごちゃになっていくのは当然です。

これを解消するのがパッチパネルという装置です。パッチパネルの仕組みはシ
ンプルで、ケーブルを挿すためのコネクタがずらりと並んでいるだけです。こ
れによって配線をいったんパッチパネルで中継できるので、配線がすっきりし
拡張性が向上します(@<img>{patch_panel})。また、うまく設計すると配線の
変更をパッチパネルの前面だけで行えるようになるので、メンテナンス性も向
上します。

//image[patch_panel][ごちゃごちゃした配線をパッチパネルで中継してすっきりと][width=12cm]

このパッチパネルを改善し、ネットワーク経由で操作できるようにしたのがい
わゆるインテリジェント・パッチパネルです。パッチパネルでメンテナンス性
が向上できるとしても、配線を変更するたびにサーバ室まで足を運ぶのはちょっ
と面倒です。そこで、パッチパネルの配線をネットワーク経由で変更できるよ
うにすることで、さらにメンテナンス性が上がります。

** OpenFlow版インテリンジェント・パッチパネル
インテリジェント・パッチパネルはOpenFlowを使うと簡単に実装できます。パッ
チパネルでの中継のように、パケットをコネクタからコネクタへ転送するとい
うのは、フローの代表的な使い方の一つだからです。

OpenFlowで実装したパッチパネルは@<img>{openflow_patch_panel}のようにな
ります。OpenFlowスイッチをパッチパネルに見たてて、接続を中継したいデバ
イス(ホストまたはスイッチ)をつなげます。コントローラはパケット転送のルー
ルをフローエントリとしてOpenFlowスイッチに書き込むことで、仮想的なパッ
チを作ります。

//image[openflow_patch_panel][OpenFlowで実現したパッチパネルの仕組み][width=12cm]

たとえば@<img>{openflow_patch_panel}について、ポート1番と4番につなげた
デバイス同士をパッチングしたい場合を考えてください。この場合、必要なフ
ローエントリは次の2つです。

- ポート1番に入力したパケットを、ポート4番に出力する
- ポート4番に入力したパケットを、ポート1番に出力する

フローエントリを構成する要素には、「こういうパケットが届いたとき」とい
うマッチングルールと、「こうする」というアクションがあるのでした。この
場合「ポートx番に入力」がマッチングルールで、「ポートy番に出力」がアク
ションです。

それでは仕組みが分かったところで、さっそくコントローラの実装に進みましょう。

** PatchPanelコントローラ

今回もまずはパッチパネルのソースコード(@<list>{patch-panel.rb})をざっ
と眺めることから始めましょう。このソースコードはTremaのサンプルアプリ
に付属する、@<tt>{patch_panel/patch-panel.rb}でも読めます。

#@warn(Trema のサンプルに patch_panel/ を追加)

//list[patch-panel.rb][パッチパネル(@<tt>{patch-panel.rb})のソースコード]{

#+BEGIN_SRC ruby
  class PatchPanel < Controller
    def start
      @patch = []
      File.open('./patch-panel.conf').each_line do |each|
        if /^(\d+)\s+(\d+)$/=~ each
          @patch << [Regexp.last_match[1].to_i, Regexp.last_match[2].to_i]
        end
      end
    end

    def switch_ready(datapath_id)
      @patch.each do |port_a, port_b|
        make_patch datapath_id, port_a, port_b
      end
    end

    private

    def make_patch(datapath_id, port_a, port_b)
      send_flow_mod_add(
        datapath_id,
        match: Match.new(in_port: port_a),
        actions: SendOutPort.new(port_b)
      )
      send_flow_mod_add(
        datapath_id,
        match: Match.new(in_port: port_b),
        actions: SendOutPort.new(port_a)
      )
    end
  end
#+END_SRC

今までに学んだ知識で、まずはこのRubyソースコードをできるところまで解読
してみましょう。

- パッチパネルの本体は@<tt>{PatchPanel}という名前の小さなクラスである
- このクラスには@<chap>{switch_monitoring_tool}で学んだ
  @<tt>{switch_ready}ハンドラが定義されており、この中で
  @<tt>{make_patch}というプライベートメソッドを呼んでいる。どうやらこ
  れがパッチング処理の本体と推測できる
- @<tt>{make_patch}メソッドでは@<tt>{send_flow_mod_add}というFlow Mod
  メッセージに関連ありそうなメソッドを2回呼んでいる。1つのパッチは2つ
  のフローエントリに対応するので、2回呼んでいるのだろうと推測できる

ここまで分かればしめたものです。あらかじめパッチパネルの仕組みは分かっ
ていたので、ソースコードを読むのは簡単ですね。

それでは実際に動かして動作イメージをつかんでみましょう。

*** 実行してみよう
パッチパネルは物理的なケーブリングを整理するためのものなので、今回は仮
想ネットワークではなく、実機のOpenFlowスイッチを使います。もし実機を持っ
ていない場合には(そういう読者が大半でしょう)、@<chap>{diy_switch}を参
考にOpenFlowスイッチの自作に挑戦してみてください。

このパッチパネルでは、どのポート同士をパッチングするかを設定ファイル
(@<tt>{patch-panel.conf})で指定します。たとえば、ポート1番と10番、およ
びポート2番と11番をパッチングする場合には、次の設定ファイルをコントロー
ラのファイル(@<tt>{patch-panel.rb})と同じディレクトリに置いてください。

#+BEGIN_SRC
1 10
2 11
#+END_SRC

@<tt>{PatchPanel}コントローラを実行すると、この設定ファイルを読み込み
仮想パッチをOpenFlowスイッチに反映します。今回は実機のOpenFlowスイッチ
を使うので、仮想ネットワーク機能は使いません。そのため、次のように
@<tt>{-c}オプションなしでコントローラを実行します。これによって、コン
トローラだけが起動し、実機のOpenFlowスイッチが接続するのを待ちます。な
おスイッチの設定は、Tremaを実行するホストのポート6633番に接続するよう
にしておいてください。

#+BEGIN_SRC bash
% trema run ./patch-panel.rb
#+END_SRC

うまく動きましたか？パッチングの設定を変更するには、設定ファイルを書き
換え、Ctrl-Cでいったん停止させてからふたたび起動してください。とても素
朴なツールですが、ちょっとしたネットワークの管理に重宝します。

** 即席Ruby入門
それでは、いつものようにパッチパネルのソースコード
(@<list>{patch-panel.rb})で新しく登場したRubyの文法を覚えましょう。

*** イテレータ
配列などの要素それぞれに対して、1つの処理を繰り返すときに使うのがイテ
レータです。「繰り返す」という動作から分かるように、イテレータはループ
の一種です。Rubyプログラマは@<tt>{each}という名前で始まるイテレータを
たくさん使います。@<tt>{each}つまり「それぞれ」についてある処理を繰り
返すのがイテレータだ、と理解すれば覚えやすいでしょう。

次の例は配列@<tt>{members}の中身をそれぞれ出力するという、イテレータの
代表的な使い方です。

#+BEGIN_SRC ruby
members = [ "友太郎", "青井", "宮坂主任" ]
members.each do | name |
  puts name
end

# (出力)
# 友太郎
# 青井
# 宮坂主任
#+END_SRC

このコードは、3つの名前が入った配列に対してイテレータ@<tt>{each}を呼び、
それぞれの名前を出力します。@<tt>{do}から@<tt>{end}までの字下げされた
ブロックが、イテレータで繰り返す処理の中身です。@<tt>{do}の右側の
@<tt>{| name |}はこのブロックに渡る仮引数で、配列の各要素である名前が
入ります。そしてブロックの中の@<tt>{puts}で、この名前を標準出力に出し
ます。

このコードは、次のCコードと意味が同じです。

#+BEGIN_SRC c
for ( i = 0; i < 3; i++ ) {
  puts members[ i ];
}
#+END_SRC

Cのコードでは、名前の入った配列@<tt>{members}の要素を順に処理するため
に、ループ用の変数@<tt>{i}を使います。@<tt>{for}で@<tt>{i = 0, 1, 2}と
ループを回すことで、@<tt>{members}の要素を順に取り出すのです。

Rubyのイテレータは、このループ用変数を使いません。仮引数に順に要素がセッ
トされるので、プログラマはループ変数の初期化やインクリメントを気にせず
にループを書けるのです。このようにループをちょっとだけ抽象化したものが
イテレータであるとも言えます。

*** 正規表現

Rubyの正規表現はPerlや他の言語の正規表現とほとんど同じで、
@<tt>{/pattern/}のようにスラッシュ(@<tt>{/})でパターンをはさみます。正
規表現に文字列をマッチさせるには@<tt>{=~}に続いて文字列を渡します。も
しマッチしなかった場合には@<tt>{nil}が返るので、次のように@<tt>{if}の
条件に指定することでマッチしたかどうかを判定できます。

#+BEGIN_SRC ruby
  if /taura/=~ "restaurant"
    puts "restaurantはtauraにマッチ"
  end

  # (出力)
  # restaurantはtauraにマッチ
#+END_SRC

正規表現で文字列のある部分を取り出したいときには、かっこ@<tt>{()}と変
数@<tt>{$1}、@<tt>{$2}、…を使います。

#+BEGIN_SRC ruby
  if /(\d+)\s+Monkeys\s+(\d+)\s+Bananas/=~ "12 Monkeys 1 Bananas"
    puts "猿は#{ $1 }匹、バナナは#{ $2 }本"
  end

  # (出力)
  # 猿は12匹、バナナは1本
#+END_SRC

このように正規表現がマッチした場合、かっこで囲われた部分にマッチした文
字列が先頭から順に @<tt>{$1}、@<tt>{$2}、… にセットされます。このあた
りも、他の言語とほとんど同じです。

** PatchPanelのソースコード

新しいRubyの文法が頭に入ったところで、パッチパネルのソースコードを詳し
く見ていきましょう。

*** 設定ファイル(@<tt>{patch-panel.conf})の読み込み

@<tt>{start}ハンドラでは、設定ファイル(@<tt>{patch-panel.conf})を読み
込み設定情報をインタンス変数@<tt>{@patch}にセットします。

#+BEGIN_SRC ruby
class PatchPanel < Controller
  def start
    @patch = []
    File.open( "./patch-panel.conf" ).each_line do | each |
      if /^(\d+)\s+(\d+)$/=~ each
        @patch << [ $1.to_i, $2.to_i ]
      end
    end
  end

  # ...
#+END_SRC

- @<tt>{@patch}は設定ファイルから読み込んだパッチング情報を入れておく
  インスタンス変数。たとえばポート1番と10番、および2番と11番をパッチン
  グする場合、この中身は@<tt>{[[1,10],[2,11]]}となる。このように、
  @<tt>{@patch}はパッチでつなぐポートのペアを要素に持つ配列からなる配
  列である
- @<tt>{File.open("ファイル名")}はファイルを読み込むメソッドで、続く
  @<tt>{each_line}は読み込んだファイルの一行一行に対してループ処理する
  ためのイテレータ。ここでは設定ファイルの一行ずつ、つまり@<tt>{"1
  10"}のようなそれぞれのパッチング設定の文字列を仮引数@<tt>{each}にセッ
  トする
- 正規表現で設定ファイルの各行@<tt>{each}をパースする。パッチでつなぐ
  ポートのペアを@<tt>{$1}と@<tt>{$2}で取り出し、@<tt>{[1, 10]}のような
  配列を作る。そして、設定情報を持つ配列である@<tt>{@patch}に@<tt>{<<}
  で追加する。

*** @<tt>{switch_ready}ハンドラ(パッチング)

@<tt>{switch_ready}ハンドラでは、起動してきたスイッチに対してパッチン
グ用のフローエントリを書き込みます。

#+BEGIN_SRC ruby
  def switch_ready(datapath_id)
    @patch.each do |port_a, port_b|
      make_patch datapath_id, port_a, port_b
    end
  end
#+END_SRC

- @<tt>{@patch.each}は@<tt>{start}ハンドラで読み込んだパッチング設定を
  ひとつずつ処理するイテレータ。仮引数は@<tt>{port_a}と@<tt>{port_b}の
  2つで、それぞれに配列の第一と第二要素、つまりパッチでつなぐポート番
  号がひとつずつ入る。
- プライベートメソッド@<tt>{make_patch}がパッチング処理の本体。起動し
  てきたスイッチのDatapath ID、およびパッチングするポート番号2つを引数
  に取る。

**** [column] 取間先生曰く：イテレータの仮引数は@<tt>{each}にしよう

イテレータを回すとき、仮引数の名前には何を使うのがよいでしょうか？律義
なプログラマはたとえば次のように、要素の種類に応じて名前を変えているで
しょう。

#+BEGIN_SRC ruby
# pages に対するイテレータなので、仮引数は page
pages.each do | page |
  page.save
end

# servers に対するイテレータなので、仮引数は server
servers.each do | server |
  server.shutdown!
end
#+END_SRC

しかし適切な名前付けは、やっかいな問題です。私の場合は、いつも迷わず@<tt>{each}を使うことにしています。

#+BEGIN_SRC ruby
pages.each do | each |
  each.save
end

servers.each do | each |
  each.shutdown!
end
#+END_SRC

実はこれは、Rubyの先祖にあたる古い言語、Smalltalkでの流儀です。
SmalltalkにはRubyにも取り入れられたイテレータの機能があり、Smalltalkの
達人プログラマは昔から仮引数に@<tt>{each}を使うようにしてきました。こ
れによって名前をあれこれ悩まなくなりますし、@<tt>{each.save}などという
コードの断片を見ただけで「これはイテレータで回している配列の要素に対す
る呼び出しだな」と分かります。

こういうよく使うイディオム、いわゆるベスト・プラクティスはRubyの先祖と
なった言語からたくさん学べます。Smalltalkのベスト・プラクティスについ
ては、『Smalltalkベストプラクティス』(Kent Beck著／ピアソン・エデュケー
ション)がおすすめです。

*** @<tt>{make_patch}メソッド(Flow Mod)

@<tt>{make_patch}メソッドではパッチング情報をフローエントリとしてスイッ
チに書き込みます。

#+BEGIN_SRC ruby
  def make_patch(datapath_id, port_a, port_b)
    send_flow_mod_add(
      datapath_id,
      match: Match.new(in_port: port_a),
      actions: SendOutPort.new(port_b)
    )
    send_flow_mod_add(
      datapath_id,
      match: Match.new(in_port: port_b),
      actions: SendOutPort.new(port_a)
    )
  end
#+END_SRC

最初に説明したように、1つのパッチは2つのフローエントリになります。
@<tt>{make_patch}の中で2回呼び出している、@<tt>{send_flow_mod_add}がフ
ローエントリを書き込むためのメソッドです。@<tt>{send_flow_mod_add}メソッ
ドは次の2つの引数を取ります。

#+BEGIN_SRC ruby
send_flow_mod_add( datapath_id, options )
#+END_SRC

それぞれの引数の意味は次の通りです。

- @<tt>{datapath_id}：Flow Modメッセージの届け先となるスイッチのDatapath ID
- @<tt>{options}：Flow Modメッセージの中身を決めるためのオプション

オプションの具体例として、最初の@<tt>{send_flow_mod_add}の呼び出し部分
を見てみましょう。

#+BEGIN_SRC ruby
  def make_patch(datapath_id, port_a, port_b)
    send_flow_mod_add(
      datapath_id,
      match: Match.new(in_port: port_a),
      actions: SendOutPort.new(port_b)
    )
    # ...
  end
#+END_SRC

ここでは、ポート@<tt>{port_a}番へ上がってきたパケットをポート
@<tt>{port_b}番へ出力するためのフローエントリを書き込んでいます。この
ためには次の2つのオプションが必要です。

- @<tt>{:match}オプションにはマッチングルールを指定する。ここでは、
  「入力ポート(@<tt>{:in_port})が@<tt>{port_a}であった場合」、というマッ
  チングルールを指定した@<tt>{Match}オブジェクトを渡している
- @<tt>{:actions}オプションにはアクションを指定する。ここでは、「ポー
  ト@<tt>{port_b}番へ出力する」というForwardアクションを、
  @<tt>{SendOutPort}クラスで作って指定している

このようにフローエントリを追加するには、フローエントリに必要な要素であ
るマッチングルールとアクションを指定します。それぞれの詳しいAPIを紹介
します。

*** マッチングルール

マッチングルールには、@<tt>{:in_port}以外にも@<chap>{openflow_spec}で
紹介した次の12種類の条件を指定できます。

#@warn(アクションに関係するクラスの名前に合わせて、以下のオプション名
も変更)

- @<tt>{:in_port} ::
                    スイッチの物理ポート番号
- @<tt>{:dl_src} ::
                   送信元MACアドレス
- @<tt>{:dl_dst} ::
                   宛先MACアドレス
- @<tt>{:dl_type} ::
                    イーサネットの種別
- @<tt>{:nw_src} ::
                   送信元IPアドレス
- @<tt>{:nw_dst} ::
                   宛先IPアドレス
- @<tt>{:nw_proto} ::
     IPのプロトコル種別
- @<tt>{:nw_tos} ::
                   IPのToSフィールド
- @<tt>{:tp_src} ::
                   TCP/UDPの送信元ポート番号
- @<tt>{:tp_dst} ::
                   TCP/UDPの宛先ポート番号
- @<tt>{:dl_vlan} ::
                    VLAN IDの値
- @<tt>{:dl_vlan_pcp} ::
     VLANのプライオティ

それぞれの利用方法は、続くいくつかの章で具体的な使い方を見て行きます。

*** アクション
アクションには、@<tt>{SendOutPort}以外にも@<chap>{openflow_spec}で紹介
した次の12種類のアクションを指定できます。

#@warn(enqueue とかのは？)

- SendOutPort ::
                指定したスイッチのポートにパケットを出力する。ポートに
                はポート番号か、またはOpenFlowで規定されている論理ポー
                ト(@<chap>{openflow_spec}参照)を指定できる
- SetEthSrcAddr ::
                  送信元MACアドレスを指定した値に書き換える
- SetEthDstAddr ::
                  宛先MACアドレスを指定した値に書き換える
- SetIpSrcAddr ::
                 送信元のIPアドレスを指定した値に書き換える
- SetIpDstAddr ::
                 宛先のIPアドレスを指定した値に書き換える
- SetIpTos ::
             IPのToSフィールドを書き換える
- SetTransportSrcPort ::
     TCP/UDPの送信元ポート番号を書き換える
- SetTransportDstPort ::
     TCP/UDPの宛先ポート番号を書き換える
- StripVlanHeader ::
                    VLANのヘッダを除去する
- SetVlanVid ::
               指定したVLAN IDをセットする、または既存のものがあれば書
               き換える
- SetVlanPriority ::
                    指定したVLAN プライオリティをセットする、または既
                    存のものがあれば書き換える
- VendorAction ::
                 ベンダ定義のアクションを実行する

まだ使っていないアクションについては、続くいくつかの章で具体的な使い方を見て行きます。

*** @<tt>{send_flow_mod_add}のオプション一覧
最後に捕捉として、@<tt>{send_flow_mod_add}で指定できるすべてのオプショ
ンを紹介しておきます。Flow Modには次のようにたくさんのパラメータがあり
ます。

- @<tt>{:match} ::
                  フローエントリのマッチングルールを指定する。本章で紹
                  介した@<tt>{Match}オブジェクトまたは
                  @<tt>{ExactMatch}オブジェクト
                  (@<chap>{learning_switch}で紹介)を指定する
- @<tt>{:actions} ::
                    フローエントリのアクションを指定する。アクションは
                    アクションの配列または単体で指定できる
- @<tt>{:idle_timeout} ::
     フローエントリが一定時間参照されなかった場合に破棄されるまでの秒
     数を指定する。デフォルトは0秒で、この場合フローエントリは破棄され
     ない
- @<tt>{:hard_timeout} ::
     フローエントリの寿命を秒数で指定する。デフォルトは0秒で、この場合
     フローエントリは破棄されない
- @<tt>{:priority} ::
     フローエントリの優先度(符号なし16ビットfp、大きいほど優先度高)。Packet Inメッセージはこの優先度順にフローエントリのマッチングルールと照らし合わされる(デフォルでは0xffff(最高優先度))
- @<tt>{:send_flow_rem} ::
     タイムアウトでフローエントリが消えるときに、Flow Removedメッセー
     ジをコントローラに送るかどうかを指定する(デフォルトは@<tt>{true})
- @<tt>{:check_overlap} ::
     @<tt>{true} ::にセットすると、フローテーブルの中に同じ優先度で競
     合するものがあった場合、フローエントリを追加せずにエラーを起こす
     (デフォルトは@<tt>{false})
- @<tt>{:emerg} ::
                  この値を@<tt>{true}にセットすると、フローエントリを
                  緊急エントリとして追加する。緊急エントリはスイッチが
                  何らかの障害でコントローラと切断したときにのみ有効と
                  なる(デフォルトは@<tt>{false})
- @<tt>{:cookie} ::
                   任意の用途に使える 64 ビットの整数。使い道としては、
                   同じクッキー値を持つフローエントリ同士をまとめて管
                   理するなどといった用途がある

こうしたオプションも、続くいくつかの章で具体的な使い方を見て行きます。

** まとめ
フローを使ってパケットを転送する方法の入門編として、OpenFlowで実現する
インテリジェントなパッチパネルを書きました。

- Tremaで作ったコントローラを、実機のOpenFlowスイッチと接続した
- Rubyプログラミングで多用する、イテレータや正規表現を学んだ
- フローエントリを追加するための@<tt>{send_flow_mod_add}を使って、スイッ
  チのフローテーブルを書き換えた
- マッチングルールの作りかたと、指定できるルールを学んだ
- Forwardアクションによるパケットの転送と、その他のアクションを学んだ

実は、今回作ったOpenFlow版パッチパネルはSDNの一種です。なぜならば、パッ
チパネルはネットワークの構成をソフトウェアで自由に変更できるツールだか
らです。@<chap>{openflow_usecases}で紹介したように、パッチパネルを使え
ばホストの所属するネットワークをソフトウェア的に切り替えられます。これ
は、物理ネットワークの上にそれぞれ独立したネットワークをいくつも作れる
という意味で、最も単純なネットワーク仮想化に他なりません。より高度な仮
想化については、@<chap>{sliceable_switch}および
@<chap>{datacenter_wakame}でも紹介します。

続く章では、Flow Modに並んで重要なOpenFlowメッセージである、Packet In
とPacket Outを使ってみましょう。
