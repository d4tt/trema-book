#+TITLE: シンプルなルータ（後編）
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* シンプルなルータ（後編）
#+BEGIN_VERSE
ルータが持つ重要な機能であるルーティングテーブルの詳細を見ていきましょ
う。ルータは実に巧妙な仕組みで転送先の情報を管理します。
#+END_VERSE

** 宛先ホストをまとめる
ルータが管理するルーティングテーブルは、宛先ホストが増えるごとに大きく
なります。前編の説明では、ルータは宛先ホスト1つごとにルーティングテー
ブルのエントリを管理していました。しかしこれでは、たとえばインターネッ
トにホストが加わるごとに、インターネット上のルータはルーティングテーブ
ルを更新する必要があります。しかも、インターネット上のホスト数は直線的
に増え続け、2012年現在では10億台を超えると言われています。そうなると、
宛先ホストごとにエントリを管理する方法は非現実的です。

これを解決するために、ルータは同じイーサネット上にあるホストを1つのグ
ループとしてまとめます。そして、ルーティングテーブルの宛先として、ホス
トではなくこのグループを指定することで、エントリ数を圧縮します。このと
き、グループ情報として使うのがネットワークアドレスとネットマスク長です。

#+CAPTION: 同じイーサネット上にあるホストを1つの宛先にまとめる
#+LABEL: fig:router_network
[[./images/router_part2/router_network.png]]

宛先ホストのグループ化は次のように行います。たとえば、▼図11-1の右側の
ネットワークは、ネットワークアドレスが192.168.1.0でネットマスク長が24
です（これを192.168.1.0/24と表現します）。このネットワーク中にあるホス
トX、Y、Zは、ネットワークアドレスと上位24ビットが同じとなるように、つ
まりIPアドレスが192.168.1で始まるようにします。こうすれば、ホストX、Y、
Zは同じ1つのグループ192.168.1.0/24に属するとみなせます。

このようにアドレスを振ることで、ルータAのルーティングテーブルは、図
11-1のようにシンプルに書けます。ホストX、Y、Z宛てのパケットを
192.168.1.0/24グループ宛てと表現することで、エントリを1つにまとめられ
るのです。

このとき、ホストX（192.168.1.1）宛のパケットを受け取ったルータAは次の
ように動作します。ルーティングテーブルのエントリ192.168.1.0/24と、パケッ
トの宛先192.168.1.1との上位24ビットを比較すると一致します。そこで、ルー
ティングテーブルから次の転送先はルータBだとわかります。ホストY、Z宛も
同様に処理できるので、このエントリ1つでホスト3台分の宛先をカバーできま
す。

*** 宛先ホストがルータと直接つながっているかを調べる
図11-1では、ルータが宛先ホストに直接接続していない場合について説明しま
したが、つながっている／いないはどのように判断するのでしょうか？

ルータは、その判断のために、自身のインターフェースに割り当てられたIPア
ドレスを使います。インターフェースに割り当てるIPアドレスには、ネットワー
ク中のホストとネットワークアドレスが同じIPアドレスを用います。▼図11-2
で、ルータBのインターフェースには、ホストX、Y、Zと同じネットワークアド
レスになるよう、たとえばアドレス192.168.1.254を割り当てます。

#+CAPTION: ルータのインターフェースには、ネットワーク内のホストとネットワークアドレスが同じとなるようにIPアドレスを割り当てる
#+LABEL: fig:router_address
[[./images/router_part2/router_address.png]]

ここで 図11-2のルータBが、ホストX（192.168.1.1）宛のパケットを受け取っ
た場合について考えます。ルータBは、パケットの宛先アドレスを参照し、ネッ
トワークアドレスが同じインターフェースを探します。この例では、
192.168.1.254というアドレスがついたインターフェースが見つかります。あ
とは、このインターフェースを通じて、ARPリクエストによるMACアドレス問い
合わせを行い、ホストX宛にパケットを出力します。

** ネットワーク宛てのエントリをまとめる
複数のホスト宛てエントリをまとめてできたエントリは、さらにまとめられる
場合もあります。

#+CAPTION: 複数のネットワークへのルーティング情報をまとめる
#+LABEL: fig:aggregate
[[./images/router_part2/aggregate.png]]

例として、▼図11-3の3つのネットワークに接続するルータBを考えてみましょ
う。これら3つのネットワークアドレスは、上位16ビットが172.16.0.0で共通
です。ここでルータAから見ると、この3つのネットワークへの次の転送先は、
いずれもルータBです。そのため、これら3つのネットワークへのルーティング
情報は、172.16.0.0/16宛として1つにまとめられます。

*** 1つの宛先に複数のエントリがマッチする場合
パケットの宛先IPアドレスに複数のエントリが該当する場合はどうなるでしょ
うか？ ▼図11-4のルータAがホストX（172.16.3.1）にパケットを送る場合に
ついて考えてみましょう。ルータAが持つルーティングテーブルは、ルータBに
つながる3つのネットワーク宛のエントリをまとめることで、図11-4のように2
つのエントリにできます。しかし、このようにまとめてしまうと、宛先
172.16.3.1のパケットは、どちらのエントリにもマッチしてしまいます。ルー
タは、どちらか正しいエントリを選択しなければいけません。

#+CAPTION: マスク長が一番長いエントリを選択する
#+LABEL: fig:longest_match
[[./images/router_part2/longest_match.png]]

複数のエントリにマッチする場合には、ネットマスク長が一番長いエントリを
選択するというルールがあります。これをロンゲストマッチと呼びます。ロン
ゲストマッチにより、ルータAは、ホストX宛のパケットをルータCへと転送し、
その結果ホストXへとパケットが届きます。

*** すべての宛先にマッチするデフォルトルート
すべての宛先をまとめたルーティング情報をデフォルトルートと呼び、その宛
先を0.0.0.0/0と表します。ネットマスク長は、ルーティング情報をまとめる
とき、ネットワークアドレスの共通部分の長さを表していました。デフォルト
ルートでは、まとめられた宛先には共通部分がまったくないため、ネットマス
ク長は0となります。

#+CAPTION: 0.0.0.0/0は、すべての宛先にマッチする
#+LABEL: fig:default_route
[[./images/router_part2/default_route.png]]

▼図11-5のように、インターネットに接続するネットワークでのルーティング
テーブルについて考えてみましょう。インターネット上のホスト数は膨大なの
で、宛先ホストをネットワーク単位にまとめたとしても、数十万エントリを扱
う必要があります。しかし、インターネットへの出口が1か所だけの場合、エ
ントリをデフォルトルート1つにまとめられます。これによって、ルーティン
グテーブル中のエントリ数を大きく減らせます。

仮にインターネットとは別にネットワーク（172.16.3.0/24）があっても、デ
フォルトルートを使うことに問題はありません。172.16.3.0/24宛のパケット
がルータAに届いた場合、ルータはロンゲストマッチからルータCへのエントリ
を選択します。それ以外のパケットは、デフォルトルートによってルータBへ
転送し、インターネットへと転送します。

** RoutingTableのソースコード
*** パケットを書き換えて転送する（再）
=RoutingTable= のソースコードを見る前に、パケットの書き換えと転送を行
う =forward= メソッドをもう一度見ていきましょう。第10章 で説明したこの
メソッドが行う5つの処理のうち、次の転送先と出力インターフェースを決め
る方法を見ていきます。

#+BEGIN_SRC ruby
  def forward(dpid, message)
    next_hop = resolve_next_hop(message.ipv4_daddr)

    interface = @interfaces.find_by_prefix(next_hop)
    return if !interface || interface.port == message.in_port

    arp_entry = @arp_table.lookup(next_hop)
    if arp_entry
      macsa = interface.hwaddr
      macda = arp_entry.hwaddr
      action = create_action_from(macsa, macda, interface.port)
      flow_mod dpid, message, action
      packet_out dpid, message.data, action
    else
      handle_unresolved_packet dpid, message, interface, next_hop
    end
  end
#+END_SRC

宛先アドレス (=message.ipv4_daddr=) に対する次転送先の決定は、
=resolve_next_hop= メソッドで行なっています。このメソッドは、次のよう
に定義されています。

#+BEGIN_SRC ruby
  def resolve_next_hop(daddr)
    interface = @interfaces.find_by_prefix(daddr.value)
    if interface
      daddr.value
    else
      @routing_table.lookup(daddr.value)
    end
  end
#+END_SRC

このメソッドでは、まずルーティングテーブル (=@routing_table=) を
=lookup= メソッドで検索し、次の転送先を返します。もし、次の転送先が見
つからなかった場合は、宛先アドレス (=daddr=) をそのまま返します。これ
は、図11-2で説明したように、宛先ホストとルータが直接接続している可能性
があるからです。

その後 =forward= メソッドへ戻り、決定した次の転送先がルータのインター
フェースに接続しているかを判定します。

#+BEGIN_SRC ruby
  interface = @interfaces.find_by_prefix(next_hop)
  return if !interface || interface.port == message.in_port
#+END_SRC

この判定は、 =Interfaces= クラスの =find_by_prefix= メソッドで行います。
このメソッドは、次の転送先と同一のネットワークアドレスであるインター
フェースを、ルータが持っているかを調べます。もし、該当するインターフェー
スがない場合、ルータはそのパケットを転送できないので、パケットを破棄し
て転送処理を終えます。

*** ルーティングテーブル（RoutingTable）の実装
次にルーティングテーブルのソースコード（▼リスト11-1）を見ていきます。

○リスト11-1：ルーティングテーブル（routing-table.rb）のソースコード
#+BEGIN_SRC ruby
  require 'ipaddr'

  class RoutingTable
    ADDR_LEN = 32

    def initialize(route = [])
      @db = Array.new(ADDR_LEN + 1) { Hash.new }
      route.each do | each |
        add each
      end
    end

    def add(options)
      dest = IPAddr.new(options[:destination])
      masklen = options[:masklen]
      prefix = dest.mask(masklen)
      @db[masklen][prefix.to_i] = IPAddr.new(options[:nexthop])
    end

    def delete(options)
      dest = IPAddr.new(options[:destination])
      masklen = options[:masklen]
      prefix = dest.mask(masklen)
      @db[masklen].delete(prefix.to_i)
    end

    def lookup(dest)
      (0..ADDR_LEN).reverse_each do | masklen |
        prefix = dest.mask(masklen)
        entry = @db[masklen][prefix.to_i]
        return entry if entry
      end
      nil
    end
  end
#+END_SRC

ルーティングテーブル作成時に呼ばれる =initialize= メソッドでは、
=ADDR_LEN + 1= （＝33）個のハッシュからなる配列 (=@db=) を用意します。
ロンゲストマッチを実現するためには、ネットマスク長ごとに分けて経路を管
理しなければなりません。そのため、このような実装になっています。

ルーティングテーブルの検索は、 =lookup= メソッドで行います。このメソッ
ドでは、宛先 =dest= に該当するエントリを =@db= 中から探します。このと
き、ロンゲストマッチが必要なので、 =(0..ADDR_LEN).reverse_each= により、
ネットマスク長が長い順にハッシュを探索し、見つかった段階でそのエントリ
を返します。

*** コンフィグ
ルータが動作するためには、インターフェースのアドレスとルーティングテー
ブルの設定が必要です。シンプルルータでは、これらの設定を
=simple_router.conf= （▼リスト11-2）に記述します。

○リスト11-2：シンプルルータのコンフィグ（simple_router.conf）
#+BEGIN_SRC ruby
  $interface = [
    {
      port: 2,
      hwaddr: '00:00:00:01:00:01',
      ipaddr: '192.168.1.1',
      masklen: 24
    },
    {
      port: 1,
      hwaddr: '00:00:00:01:00:02',
      ipaddr: '192.168.2.1',
      masklen: 24
    }
  ]

  $route = [
    {
      destination: '0.0.0.0',
      masklen: 0,
      nexthop: '192.168.1.2'
    }
  ]
#+END_SRC

インターフェースの設定では、そのインターフェースのMACアドレス
(=:hwaddr=)、IPアドレス (=:ipaddr=)、ネットマスク長 (=:masklen=) と、こ
のインターフェースがOpenFlowスイッチのどのポート (=:port=) に対応してい
るかを指定します。

ルーティングテーブルの設定では、宛先 (=:destination=)、ネットマスク長
(=:masklen=) と次の転送先 (=:nexthop=) を指定します。

** 実行してみよう
いよいよシンプルルータを動かしてみましょう。いろいろなパケットの送受信
を行うために、今回は仮想ホストではなく実際のホストを使用します。シンプ
ルルータとして動作させるサーバも含めて、合計で3台のホストを用意し、▼
図11-6のように接続してください。

#+CAPTION: シンプルルータを動かすための構成
#+LABEL: fig:network
[[./images/router_part2/network.png]]

次に、ホスト1にログインし、以下のようにIPアドレスとデフォルトルートを
設定してください。IPアドレスは192.168.1.2/24、デフォルトルートは
192.168.1.1です。

#+BEGIN_SRC bash
host1% sudo ifconfig eth0 192.168.1.2/24 ▼<Enter>
host1% sudo route add -net default gw 192.168.1.1 ▼<Enter>
#+END_SRC

ホスト2についても同様です。こちらは、IPアドレスを192.168.2.2/24に、デ
フォルトルートを192.168.2.1に設定します。

#+BEGIN_SRC bash
host2% sudo ifconfig eth0 192.168.2.2/24 ▼<Enter>
host2% sudo route add -net default gw 192.168.2.1 ▼<Enter>
#+END_SRC

シンプルルータ用のサーバ上では、仮想ネットワーク機能を使って仮想スイッ
チを1台起動します。次の設定ファイルを =simple_router_network.conf= と
して用意してください。

#+BEGIN_SRC ruby
  vswitch('switch') { datapath_id '0x1' }

  link 'switch', 'eth0'
  link 'switch', 'eth1'
#+END_SRC

この設定ファイルを指定し =trema run= で =simple-router.rb= を実行すれ
ば、シンプルルータが起動します。

#+BEGIN_SRC bash
% trema run ./simple-router.rb -c ./simple_router_network.conf ▼<Enter>
#+END_SRC

*** pingで動作を確認する
それでは =ping= を使ってシンプルルータが正しく動作しているかを順に確認
して行きましょう。まずは、シンプルルータが =ping= に応答するかの確認で
す。ホスト1にログインし、次のようにシンプルルータのIPアドレス
192.168.1.1に =ping= を打ってみます。

#+BEGIN_SRC bash
% ping 192.168.1.1 ▼<Enter>
PING 192.168.1.1 (192.168.1.1): 56 data bytes
Request timeout for icmp_seq 0
Request timeout for icmp_seq 1
64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=1.806 ms
64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=3.629 ms
64 bytes from 192.168.1.1: icmp_seq=4 ttl=64 time=1.475 ms
...
#+END_SRC

はじめの何回かは =ping= の応答が返ってきません。実際のルータでは、ARP
が未解決のパケットを受信した時、そのパケットをキューにためておき、ARP
が解決した後に転送します。しかし、シンプルルータではこの仕組みを実装し
ていないため、通信の始めではこのように応答が返りません。ただし、いった
んARPが解決されてしまえば、後の通信は通常通りに進みます。

次に、シンプルルータをまたいだ2つのホスト間で通信できることも確認して
みましょう。ホスト2のIPアドレス192.168.2.2に対して、ホスト1から =ping=
を送ります。

#+BEGIN_SRC bash
host1% ping 192.168.2.2 ▼<Enter>
PING 192.168.2.2 (192.168.2.2): 56 data bytes
64 bytes from 192.168.2.2: icmp_seq=0 ttl=64 time=3.715 ms
64 bytes from 192.168.2.2: icmp_seq=1 ttl=64 time=3.271 ms
64 bytes from 192.168.2.2: icmp_seq=2 ttl=64 time=3.367 ms
64 bytes from 192.168.2.2: icmp_seq=3 ttl=64 time=3.545 ms
64 bytes from 192.168.2.2: icmp_seq=4 ttl=64 time=2.153 ms
^C
--- 192.168.2.2 ping statistics ---
5 packets transmitted, 5 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 2.153/3.210/3.715/0.550 ms
#+END_SRC

ちゃんと =ping= が返ってきました。もちろん、sshやhttpなど今回試した
ping以外の通信も通りますので、いろいろ試してみるとよいでしょう。

** まとめ
ルータ編のまとめとして、最も重要な機能であるルーティングテーブルを詳し
く説明しました。

- ルーティングテーブルの複数のエントリ（宛先がホストのIPアドレス）を1
  つのエントリ（宛先がネットワークアドレス）にまとめることで、エントリ
  数を減らせる
- こうしてまとめられたエントリは、ネットワークアドレスの一部が同じ他の
  エントリとまとめることで、さらにエントリ数を減らせる
- パケットの宛先にマッチするエントリがルーティングテーブルに複数ある場
  合は、ネットマスクが最も長いエントリを優先（ロンゲストマッチ）する
- ルーティングテーブルの宛先に0.0.0.0/0を指定することで、パケットがエ
  ントリにマッチしなかった場合のデフォルトの宛先、つまりデフォルトルー
  トを設定できる

次章では、Part2プログラミング編の最終章として、今まで使ってきたTremaの
内部構造を解き明かします。
