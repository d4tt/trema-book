#+TITLE: OpenFlowのユースケース
#+AUTHOR: Yasuhito Takamiya
#+LANGUAGE: ja
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="book.css" />
#+OPTIONS: toc:nil

* OpenFlowのユースケース
#+BEGIN_VERSE
OpenFlowは一見何にでも使えそうですが、本当にそうでしょうか？OpenFlowがぴったりとはまる使いみちを考えてみましょう。
#+END_VERSE

** OpenFlowはアカデミア出身
OpenFlowスイッチには「コントローラさえ書けばどんなネットワーク機器にも
化けられる」という特長があります。乱暴に言うと、スイッチのような単純な
機器はもちろん、ルータやロードバランサ、ファイアウォールやNATなど複雑
な機器も、コントローラの実装をがんばれば実現できてしまいます。もちろん、
専用機と同じ機能をすべて実装するのは大変ですし、機能の一部をソフトウェ
アとして実装することになるので実装が悪いと性能は落ちます。しかし、ソフ
トウェア次第で何でもできることに変わりはありません。

この何でもできるという特長は、もともとは大学や研究所などアカデミアから
のニーズによって生まれたものでした。今までのスイッチやルータにとらわれ
ない、まったく新しいインターネットを研究したい。でもすでにあるスイッチ
やルータのファームウェアを改造するのは大変だ。そうかといって一からハー
ドウェアは作りたくないし……、大規模な仮想ネットワーク上で実験してもい
いけれど、それだと実際のインターネット環境とあまりにも違いすぎる。こう
したジレンマを解消するために考え出されたのがOpenFlowだったわけです。

** なぜOpenFlowが注目されているのか？
では、インターネットの研究用だったOpenFlowが巨大データセンターに代表さ
れる産業界でも注目されるようになったのはなぜでしょうか？

データセンターで最も重視されるのはスループット（単位時間あたりの処理能
力）とコストです。Googleなどの巨大データセンターでは、世界中から届くた
くさんのリクエストを短時間でさばくために（つまり、スループットを上げる
ために）物理的にたくさんのスイッチやサーバをそろえる必要があります。も
し1台1台の価格が高いと、ハードウェア代だけでコストが膨大になってしまい
ます。そのため、秋葉原でも買えるコモディティ（普及品）から構成される安
いハードウェアを使います。

データセンターの信頼性はハードウェアではなくソフトウェアでカバーします。
巨大データセンターではとにかく大量のサーバやスイッチを使うため、個々の
ハードウェアの信頼性はそれほど重視しません。数十万台のサーバがある環境
では、そもそもすべてが故障なしに動き続けることはまったく期待できないか
らです。そのかわり、上位のソフトウェア層で信頼性を担保します。死活監視
や冗長化、障害からの自動復旧など信頼性にかかわる部分はすべてミドルウェ
アとして実装するのです。

OpenFlowはこのデータセンターのモデルにうまくマッチしています。OpenFlow
は制御を行うソフトウェアであるコントローラと、その命令に従うだけのハー
ドウェアであるOpenFlowスイッチにきれいに分離できます。これは、データセ
ンターのモデル（全体を制御し信頼性を確保するミドルウェアと、大量のコモ
ディティハードウェア）と似ています。コントローラはソフトウェアとして実
装するので、死活監視や冗長化、自動復旧などで信頼性を担保するデータセン
ターのミドルウェアと容易に連携できます。ネットワークとアプリケーション
がそれぞれ独立して信頼性を確保するよりも無駄が少なく、かつ高い信頼性を
実現できます。

そして何よりも、データセンターはOpenFlowのような新しい技術を採用しやす
いプラットフォームです。データセンターの増設は、サーバ単位ではなく、フ
ロア単位もしくは建物単位と、大きなまとまった単位で行います。そのため、
既存部分との相互接続性を気にする必要は少なく、独自の新技術を導入しやす
いのです。

このように「ソフトウェアによる制御部とハードウェアがきれいに分離してお
り、既存ミドルウェアとの連携が容易」というOpenFlowの設計が、たまたまデー
タセンターにマッチした、これがOpenFlowに注目が集まる理由です。

** ユースケースあれこれ
ここでは、スイッチやルータなど基本的なネットワーク部品をOpenFlowで実装
する方法を見ていきます。その前に、OpenFlowでできることをさらに詳しく見
ていきましょう。

「OpenFlowでできることは何か？」という質問を言いかえると、「フローテー
ブルでできることは何か？」になります。OpenFlowスイッチがフローテーブル
に従って次々とパケットを転送する様子は、筆者が小学生のころよく楽しんだ
水道管ゲームを思い出させます。これは水道管のバルブから蛇口まで、さまざ
まな形の水道管のカードをならべて水を届けるというゲームです。フローテー
ブルでできることはこれによく似ています。できることは基本的には次の4つ
です。

1. パケットを転送する
2. 流量を調べる
3. 書き換える
4. 分岐する

これがすべてです。パケットを指定したスイッチポートから出力することで転
送する。転送されたパケットの量を調べる。パケットを書き換える。パケット
を複製して複数のスイッチポートから出力する。これらを自由に組み合わせて、
さまざまなタイプのネットワークを作れます。

それではいよいよ実際のユースケースを見ていきましょう。上の4種類のカー
ドをどのように組み合わせて実現しているかというところに注目してください。

*** スイッチ
「パケットを転送する」を使うと、最もシンプルなスイッチをOpenFlowで実現
できます（▼図2-1）。スイッチは届いたパケットの宛先のMACアドレスを見て、
そのMACアドレスを持つホストがつながるポートへとパケットを転送します。

○図2-1：OpenFlowでスイッチを実現する

これに「流量を調べる」を組み合わせると、スイッチにトラフィック集計機能
を付け加えられます（▼図2-2）。フローエントリごとにどれだけのパケット
を転送したかを集めることで、コントローラでネットワーク全体のトラフィッ
クを集計できます。

○図2-2：OpenFlowでトラフィック集計機能つきスイッチを実現する

なお、スイッチのOpenFlowでの詳しい実装方法は第8章で、またトラフィック
集計機能は第9章で説明します。

*** ルータ
「パケットを転送する」に「書き換える」を組み合わせると、ルータを
OpenFlowで実現できます（▼図2-3）。ルータは異なる2つのネットワークの間
で動作し、ネットワーク間のパケットのやりとりに必要な転送と書き換え処理
を行います。パケットがルータを通るとき、ルータはパケットの宛先と送信元
のMACアドレスを書き換えて転送します。

○図2-3：OpenFlowでルータを実現する

なお、ルータのOpenFlowでの詳しい実装方法は第10章および第11章で説明しま
す。

*** ロードバランサ
ルータに「流量を調べる」を追加して改造すると、いわゆるロードバランサを
OpenFlowで実現できます（▼図2-4）。ロードバランサとは、Webサーバなどア
クセスが集中しやすいサーバの負荷を下げるため、クライアントからのアクセ
スを複数台のバックエンドサーバに振り分けるネットワーク装置やソフトウェ
アです。

○図2-4：OpenFlowでロードバランサを実現する

ロードバランサは次のように動作します。

1. クライアントからのリクエストが届くと、担当するバックエンドサーバを決める
2. リクエストパケットをバックエンドサーバに届けるために書き換える（ルータと同じ）
3. バックエンドサーバがつながるスイッチポートに、書き換えたパケットを出力する

アクセスの状況によっては、バックエンドサーバの間で負荷に偏りが出ること
があります。そこで「流量を調べる」を使うと、空いているバックエンドへ優
先して振り分けられます。

必要なバックエンドサーバの数は、時間帯によって異なります。たとえば、ア
クセスが減る夜中になればバックエンドサーバ数を減らせます。逆に昼食後な
どのアクセスが増えやすい時間帯では、バックエンドサーバを増やす必要があ
ります。

もしバックエンドサーバの数を調節できるAPIがあれば、ロードバランシング
とバックエンドサーバ数の調節を連携できます（▼図2-5）。「流量を調べる」
でトラフィックを調べ、これに応じてバックエンドサーバ数をAPI経由で自動
調節できるからです。

○図2-5：トラフィックに応じてバックエンドサーバの数を調節する高度なロードバランサの例

このように、コントローラはバックエンドサーバのような既存ミドルウェアと
連携することでネットワークに機能を追加できます。コントローラは主要なプ
ログラミング言語で実装できるので（第4章で紹介）、さまざまな既存ミドル
ウェアのAPIを通じて楽に連携できます。

さて、ここまでで基本的なネットワーク機器をOpenFlowで実装する例をいくつ
か紹介してきました。ここからはより細かく、ネットワーク経路の制御を
OpenFlowで行うパターンをいくつか見ていきます。

*** 帯域を目一杯まで使う
「パケットを転送する」を使うと、複数の経路を使ってVMイメージなどの大き
なデータを効率的に転送できます。転送元から転送先へ複数のコネクションを
張り、それぞれを同時に使って転送できるのです（▼図2-6）。

○図2-6：複数経路を使って帯域をかせぐ

この「帯域を目一杯まで使う」の具体的な例は、第17章で紹介します。

*** パケットを複製する
「分岐する」を使えば、サーバが送信したパケットをスイッチがコピーして、
複数のクライアントに届けることができます（▼図2-7）。クライアントの数
が増えても、スイッチがパケットを複製してくれるので、サーバから送るパケッ
トの数を増やす必要はありません。これによって、ネットワークの帯域を節約
できます。

また、「分岐する」で冗長な経路を作り、それぞれの経路に複製したパケット
を流せば、ネットワークに障害が起こった場合でもパケットをロスせずに復旧
できます。▼図2-8でクライアントとサーバが通信する状況を考えてください。
一番左のスイッチは、複製したパケットを2つの経路それぞれに送ります。受
け取る側は、冗長化された経路のうちどちらか一方だけから受け取るようにし
ておきます。このようにしておけば、もしどちらかの経路に障害が起こっても、
もう一方の経路からパケットを受け取れるので、パケットを1つも落とさずに
通信を続けられます。

○図2-7：パケットを複製し、複数のクライアントに効率的に届ける

○図2-8：OpenFlowで冗長な経路を作る

ここで重要なのは、コントローラは全体の状況を見て自由自在に経路を決める
ことができるということです。従来のネットワークでは、各スイッチが個別に
最適となるような経路を決めるため最短路など特定の経路しか取れませんでし
た。逆にOpenFlowでは、コントローラが全体の道路と交通状況を逐一把握して
いるため、好きなポイントで自由に経路を切り替えられます。

*** 自由にネットワーク構成を作る・変更する
OpenFlowを使うと、ネットワーク構成を物理的な構成にしばられることなく自
由に変更できます。▼図2-9のようにスイッチにホスト2つとネットワーク2つ
が接続していると考えてください。コントローラはこれに「パケットを転送す
る」フローエントリを打ち込むことで、ホストとネットワークの接続を自由に
切り替えられます。たとえばホストAがつながるポートとネットワークBのつな
がるポートでパケットを相互に転送すれば、ホストAはネットワークBに属する
ようになります。

こうした機能を持つハードウェアをパッチパネルと呼び、OpenFlowでの実現方
法を第7章で詳しく説明します。より高度な、いわゆるネットワーク仮想化の
例については、第15章および第16章で紹介します。

○図2-9：各ホストの所属するネットワークを切り替える

** まとめ
OpenFlowがぴったりとはまる具体的なユースケースを見てきました。OpenFlow
ではプログラミング次第で好きな機能を追加できますが、専用のネットワーク
機器と同じフル機能を実装するのは現実的ではありません。そのかわりデータ
センターに代表される、ソフトウェアでハードウェア全体を制御する世界とう
まくマッチします。ネットワーク管理の自動化や最適化、そしてスループット
の向上に必要な機能をOpenFlowで実装し、信頼性にかかわる部分は他のミドル
ウェアに任せる、それがOpenFlowの最も威力を発揮する使い方です。

次章ではいよいよOpenFlowの仕様を少し詳しく紹介します。

*** 参考文献
- 『Googleクラウドの核心』（Luiz Andre Barroso、Urs Holzle 著／日経BP社） ::
Googleの巨大データセンターはウェアハウス・スケール・コンピュータ（WSC；
倉庫規模のコンピュータ）とも呼ばれ、何万ものサーバが詰め込まれた巨大倉
庫を1台のコンピュータとしてソフトウェアで制御します。実際のデータセン
ター運用者でしか知り得ない豊富なデータを元に、WSC全体のアーキテクチャ
とその中で使われるミドルウェア等の設計を議論しています。
